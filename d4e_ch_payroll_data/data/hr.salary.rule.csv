name,condition_select,category_id/id,rule_type,code,struct_id/id,sequence,active,appears_on_payslip,condition_python,amount_select,amount_python_compute,payslip_imprime_opt,rubrique_certificat,payslip_rubrique,id
Nombre de fiche de salaire,none,d4e_ch_payroll_data.REPORT_1,storage data,001,d4e_ch_payroll_data.Standard_structure,1,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = employee.hr_payslip_number,tj_imprime,Aucune rubrique,,120
Cumul AVS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,002,d4e_ch_payroll_data.Standard_structure,2,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('AVS_BASE'):
  for m in table_calcul_base['AVS_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['AVS_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,121
Cumul AC,none,d4e_ch_payroll_data.REPORT_1,calculation basis,003,d4e_ch_payroll_data.Standard_structure,3,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('AC_BASE'):
  for m in table_calcul_base['AC_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['AC_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,132
Cumul LAA,none,d4e_ch_payroll_data.REPORT_1,calculation basis,004,d4e_ch_payroll_data.Standard_structure,4,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('LAA_BASE'):
  for m in table_calcul_base['LAA_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['LAA_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,133
Cumul IJM,none,d4e_ch_payroll_data.REPORT_1,calculation basis,005,d4e_ch_payroll_data.Standard_structure,5,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('IJM_BASE'):
  for m in table_calcul_base['IJM_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['IJM_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,134
Cumul LPP,none,d4e_ch_payroll_data.REPORT_1,calculation basis,006,d4e_ch_payroll_data.Standard_structure,6,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('LPP_BASE'):
  for m in table_calcul_base['LPP_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['LPP_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,135
Cumul ACC,none,d4e_ch_payroll_data.REPORT_1,calculation basis,007,d4e_ch_payroll_data.Standard_structure,7,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('ACC_BASE'):
  for m in table_calcul_base['ACC_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['ACC_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,136
Cumul IS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,008,d4e_ch_payroll_data.Standard_structure,8,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('IS_BASE'):
  for m in table_calcul_base['IS_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['IS_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,137
Cumul Vacances,none,d4e_ch_payroll_data.REPORT_1,calculation basis,009,d4e_ch_payroll_data.Standard_structure,9,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('VAC_BASE'):
  for m in table_calcul_base['VAC_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['VAC_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,278
Salaire mensuel,none,d4e_ch_payroll_data.GROSS_1,section,R1000,d4e_ch_payroll_data.Standard_structure,1000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.wage,tj_imprime,1 Salaire / Rente,Salaire Brut,4
Correction salaire mensuel,none,d4e_ch_payroll_data.GROSS_1,section,R1001,d4e_ch_payroll_data.Standard_structure,1001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1001: 
	for element in inputs.A1001:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,130
Salaire horaire,none,d4e_ch_payroll_data.GROSS_1,section,R1005,d4e_ch_payroll_data.Standard_structure,1005,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result_qty = worked_days.WORK101.number_of_hours if worked_days.WORK101 else 0
result = contract.hourly_wage",tj_imprime,1 Salaire / Rente,Salaire Brut,5
Honoraires,none,d4e_ch_payroll_data.GROSS_1,section,R1010,d4e_ch_payroll_data.Standard_structure,1010,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1010: 
	for element in inputs.A1010:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,8
Heures supplémentaires à 125%,none,d4e_ch_payroll_data.GROSS_1,section,R1061,d4e_ch_payroll_data.Standard_structure,1061,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1061: 
	for element in inputs.A1061:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,51
Heures supplémentaires,none,d4e_ch_payroll_data.GROSS_1,section,R1065,d4e_ch_payroll_data.Standard_structure,1065,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1065: 
	for element in inputs.A1065:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,52
Indemnité travail par équipes,none,d4e_ch_payroll_data.GROSS_1,section,R1070,d4e_ch_payroll_data.Standard_structure,1070,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1070: 
	for element in inputs.A1070:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,53
Indemnité pour service de piquet,none,d4e_ch_payroll_data.GROSS_1,section,R1071,d4e_ch_payroll_data.Standard_structure,1071,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1071: 
	for element in inputs.A1071:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,54
Indemnité d'engagement,none,d4e_ch_payroll_data.GROSS_1,section,R1072,d4e_ch_payroll_data.Standard_structure,1072,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1072: 
	for element in inputs.A1072:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,55
Indemnité pour travail dominical,none,d4e_ch_payroll_data.GROSS_1,section,R1073,d4e_ch_payroll_data.Standard_structure,1073,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1073: 
	for element in inputs.A1073:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,56
Indemnité pour inconvénients,none,d4e_ch_payroll_data.GROSS_1,section,R1074,d4e_ch_payroll_data.Standard_structure,1074,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1074: 
	for element in inputs.A1074:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,57
Indemnité pour service de nuit,none,d4e_ch_payroll_data.GROSS_1,section,R1075,d4e_ch_payroll_data.Standard_structure,1075,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1075: 
	for element in inputs.A1075:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,58
Indemnité pour travail de nuit,none,d4e_ch_payroll_data.GROSS_1,section,R1076,d4e_ch_payroll_data.Standard_structure,1076,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1076: 
	for element in inputs.A1076:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,59
Indemnités inconvénients du chantier,none,d4e_ch_payroll_data.GROSS_1,section,R1100,d4e_ch_payroll_data.Standard_structure,1100,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1100: 
	for element in inputs.A1100:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,60
Indemnité pour travail pénible,none,d4e_ch_payroll_data.GROSS_1,section,R1101,d4e_ch_payroll_data.Standard_structure,1101,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1101: 
	for element in inputs.A1101:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,,61
Indemnité pour travail salissant,none,d4e_ch_payroll_data.GROSS_1,section,R1102,d4e_ch_payroll_data.Standard_structure,1102,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1102: 
	for element in inputs.A1102:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,62
Indemnité pour poussière,none,d4e_ch_payroll_data.GROSS_1,section,R1103,d4e_ch_payroll_data.Standard_structure,1103,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1103: 
	for element in inputs.A1103:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,63
Indemnité pour travaux souterrains,none,d4e_ch_payroll_data.GROSS_1,section,R1104,d4e_ch_payroll_data.Standard_structure,1104,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1104: 
	for element in inputs.A1104:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,64
Avancement,none,d4e_ch_payroll_data.GROSS_1,section,R1110,d4e_ch_payroll_data.Standard_structure,1110,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1110: 
	for element in inputs.A1110:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,65
Prime pour percement,none,d4e_ch_payroll_data.GROSS_1,section,R1111,d4e_ch_payroll_data.Standard_structure,1111,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1111: 
	for element in inputs.A1111:
		result += element.amount",tj_imprime,3 Prestations non périodiques,Salaire Brut,66
Prime pour ténacité,none,d4e_ch_payroll_data.GROSS_1,section,R1112,d4e_ch_payroll_data.Standard_structure,1112,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1112: 
	for element in inputs.A1112:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,67
Prime d'engagement,none,d4e_ch_payroll_data.GROSS_1,section,R1130,d4e_ch_payroll_data.Standard_structure,1130,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1130: 
	for element in inputs.A1130:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,68
Indemnité de non-engagement,none,d4e_ch_payroll_data.GROSS_1,section,R1131,d4e_ch_payroll_data.Standard_structure,1131,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1131: 
	for element in inputs.A1131:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,69
Indemnité de vacances,none,d4e_ch_payroll_data.GROSS_1,section,R1160,d4e_ch_payroll_data.Standard_structure,1160,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1160: 
	for element in inputs.A1160:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,70
Indemnité pour jours fériés,none,d4e_ch_payroll_data.GROSS_1,section,R1161,d4e_ch_payroll_data.Standard_structure,1161,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1161: 
	for element in inputs.A1161:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,71
Vacances payées %,python,d4e_ch_payroll_data.VACANCES_1,section,R1162,d4e_ch_payroll_data.Standard_structure,1162,TRUE,TRUE,result = contract.hourly_wage > 0,code,"if  (employee.emp_age >= 20 and employee.emp_age <= 49) :
    result = categories.BRUT
    result_rate = payslip.rule_parameter('vacances_20')
elif (employee.emp_age >= 50):
    result = categories.BRUT
    result_rate = payslip.rule_parameter('vacances_50')
else :
    result = 0",none_zero_imprime,1 Salaire / Rente,Salaire Brut,117
Vacances payées,none,d4e_ch_payroll_data.VACANCES_1,section,R1163,d4e_ch_payroll_data.Standard_structure,1163,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1163: 
	for element in inputs.A1163:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,72
Paiement vacances,none,d4e_ch_payroll_data.VACANCES_1,section,R1165,d4e_ch_payroll_data.Standard_structure,1165,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1165: 
	for element in inputs.A1165:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,73
13e salaire payé %,python,d4e_ch_payroll_data.GROSS_1,section,R1180,d4e_ch_payroll_data.Standard_structure,1180,TRUE,TRUE,result = contract.hourly_wage > 0,code,"result = categories.BRUT
result_rate = payslip.rule_parameter('taux_13eme')
",none_zero_imprime,1 Salaire / Rente,Salaire Brut,118
13e salaire payé,none,d4e_ch_payroll_data.GROSS_1,section,R1181,d4e_ch_payroll_data.Standard_structure,1181,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1181: 
	for element in inputs.A1181:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,74
Gratification,none,d4e_ch_payroll_data.GROSS_1,section,R1201,d4e_ch_payroll_data.Standard_structure,1201,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1201: 
	for element in inputs.A1201:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,75
Gratification de Noël,none,d4e_ch_payroll_data.GROSS_1,section,R1202,d4e_ch_payroll_data.Standard_structure,1202,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1202: 
	for element in inputs.A1202:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,76
Bonus,none,d4e_ch_payroll_data.GROSS_1,section,R1210,d4e_ch_payroll_data.Standard_structure,1210,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1210: 
	for element in inputs.A1210:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,77
Participation aux bénéfices,none,d4e_ch_payroll_data.GROSS_1,section,R1211,d4e_ch_payroll_data.Standard_structure,1211,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1211: 
	for element in inputs.A1211:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,78
Allocation spéciale,none,d4e_ch_payroll_data.GROSS_1,section,R1212,d4e_ch_payroll_data.Standard_structure,1212,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1212: 
	for element in inputs.A1212:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,79
Prime de succès,none,d4e_ch_payroll_data.GROSS_1,section,R1213,d4e_ch_payroll_data.Standard_structure,1213,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1213: 
	for element in inputs.A1213:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,80
Prime de rendement,none,d4e_ch_payroll_data.GROSS_1,section,R1214,d4e_ch_payroll_data.Standard_structure,1214,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1214: 
	for element in inputs.A1214:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,81
Prime de reconnaissance,none,d4e_ch_payroll_data.GROSS_1,section,R1215,d4e_ch_payroll_data.Standard_structure,1215,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1215: 
	for element in inputs.A1215:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,82
Prime pour propositions d'amélioration,none,d4e_ch_payroll_data.GROSS_1,section,R1216,d4e_ch_payroll_data.Standard_structure,1216,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1216: 
	for element in inputs.A1216:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,83
Prime sur chiffre d'affaires,none,d4e_ch_payroll_data.GROSS_1,section,R1217,d4e_ch_payroll_data.Standard_structure,1217,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1217: 
	for element in inputs.A1217:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,84
Commission,none,d4e_ch_payroll_data.GROSS_1,section,R1218,d4e_ch_payroll_data.Standard_structure,1218,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1218: 
	for element in inputs.A1218:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,85
Prime de présence,none,d4e_ch_payroll_data.GROSS_1,section,R1219,d4e_ch_payroll_data.Standard_structure,1219,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1219: 
	for element in inputs.A1219:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,86
Cadeau pour ancienneté de service,none,d4e_ch_payroll_data.GROSS_1,section,R1230,d4e_ch_payroll_data.Standard_structure,1230,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1230: 
	for element in inputs.A1230:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,87
Cadeau de jubilé,none,d4e_ch_payroll_data.GROSS_1,section,R1231,d4e_ch_payroll_data.Standard_structure,1231,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1231: 
	for element in inputs.A1231:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,88
Prime de fidélité,none,d4e_ch_payroll_data.GROSS_1,section,R1232,d4e_ch_payroll_data.Standard_structure,1232,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1232: 
	for element in inputs.A1232:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,89
Prime pour prévention de dommages,none,d4e_ch_payroll_data.GROSS_1,section,R1250,d4e_ch_payroll_data.Standard_structure,1250,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1250: 
	for element in inputs.A1250:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,90
Salaire en cas d'accident,none,d4e_ch_payroll_data.GROSS_1,section,R1300,d4e_ch_payroll_data.Standard_structure,1300,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1300: 
	for element in inputs.A1300:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,91
Salaire en cas de maladie,none,d4e_ch_payroll_data.GROSS_1,section,R1301,d4e_ch_payroll_data.Standard_structure,1301,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1301: 
	for element in inputs.A1301:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,92
"Salaire service militaire, protection civile",none,d4e_ch_payroll_data.GROSS_1,section,R1302,d4e_ch_payroll_data.Standard_structure,1302,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1302: 
	for element in inputs.A1302:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,93
Salaire formation et perfectionnement,none,d4e_ch_payroll_data.GROSS_1,section,R1303,d4e_ch_payroll_data.Standard_structure,1303,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1303: 
	for element in inputs.A1303:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,94
Part privée voiture de service,none,d4e_ch_payroll_data.GROSS_1,section,R1910,d4e_ch_payroll_data.Standard_structure,1910,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.private_share_service_car,none_zero_imprime,Aucune rubrique,Salaire Brut,95
Indemnité accident,none,d4e_ch_payroll_data.INDEMNITES_1,section,R2030,d4e_ch_payroll_data.Standard_structure,2030,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A2030: 
	for element in inputs.A2030:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,96
Indemnité maladie,none,d4e_ch_payroll_data.INDEMNITES_1,section,R2035,d4e_ch_payroll_data.Standard_structure,2035,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A2035: 
	for element in inputs.A2035:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,97
Indemnité maternité,none,d4e_ch_payroll_data.INDEMNITES_1,section,R2040,d4e_ch_payroll_data.Standard_structure,2040,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A2040: 
	for element in inputs.A2040:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,98
Correction indemnités de tiers,none,d4e_ch_payroll_data.GROSS_1,section,R2050,d4e_ch_payroll_data.Standard_structure,2050,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A2050: 
	for element in inputs.A2050:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,99
Allocations familiales,none,d4e_ch_payroll_data.ALW_1,section,R3030,d4e_ch_payroll_data.Standard_structure,3030,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.allocation_for_child,none_zero_imprime,Aucune rubrique,Salaire Brut,115
Base AVS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,AVS_BASE,d4e_ch_payroll_data.Standard_structure,5000,TRUE,TRUE,“ ”,code,result = categories.BRUT+categories.VACANCES,tj_imprime,Aucune rubrique,,10
Base AC,none,d4e_ch_payroll_data.REPORT_1,calculation basis,AC_BASE,d4e_ch_payroll_data.Standard_structure,5000,TRUE,TRUE,“ ”,code,result = categories.BRUT+categories.VACANCES,tj_imprime,Aucune rubrique,,13
Base AC Complémentaire,none,d4e_ch_payroll_data.REPORT_1,calculation basis,ACC_BASE,d4e_ch_payroll_data.Standard_structure,5000,TRUE,TRUE,result = contract.ac_contribution == 1,code,"if AC_BASE <= payslip.rule_parameter('plafond_ac_mensuel'):
        result = 0
if AC_BASE > payslip.rule_parameter('plafond_ac_mensuel'):
        result = categories.BRUT +categories.VACANCES - payslip.rule_parameter('plafond_ac_mensuel')",tj_imprime,Aucune rubrique,,17
Base LAA,none,d4e_ch_payroll_data.REPORT_1,calculation basis,LAA_BASE,d4e_ch_payroll_data.Standard_structure,5000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"if payslip.paid_amount <= payslip.rule_parameter('plafond_laa_mensuel'):
    result = categories.BRUT+categories.VACANCES
if payslip.paid_amount > payslip.rule_parameter('plafond_laa_mensuel'):
    result = payslip.rule_parameter('plafond_laa_mensuel')",tj_imprime,Aucune rubrique,,24
Base IJM,none,d4e_ch_payroll_data.REPORT_1,calculation basis,IJM_BASE,d4e_ch_payroll_data.Standard_structure,5000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"if payslip.paid_amount <= payslip.rule_parameter('plafond_ijm_mensuel'):
    result = categories.BRUT+categories.VACANCES
if payslip.paid_amount > payslip.rule_parameter('plafond_ijm_mensuel'):
    result = payslip.rule_parameter('plafond_ijm_mensuel')",tj_imprime,Aucune rubrique,,32
Base LPP,none,d4e_ch_payroll_data.REPORT_1,calculation basis,LPP_BASE,d4e_ch_payroll_data.Standard_structure,5000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"if payslip.paid_amount <= payslip.rule_parameter('plafond_lpp_mensuel'):
    result = categories.BRUT+categories.VACANCES
if payslip.paid_amount > payslip.rule_parameter('plafond_lpp_mensuel'):
    result = payslip.rule_parameter('plafond_lpp_mensuel')",tj_imprime,Aucune rubrique,,49
Base IS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,IS_BASE,d4e_ch_payroll_data.Standard_structure,5000,TRUE,TRUE, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs.  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10 ,code,result = categories.BRUT + categories.INDEMNITES +categories.VACANCES,tj_imprime,Aucune rubrique,,100
Base Vacances,none,d4e_ch_payroll_data.REPORT_1,calculation basis,VAC_BASE,d4e_ch_payroll_data.Standard_structure,5000,TRUE,FALSE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = categories.BRUT,tj_imprime,Aucune rubrique,,277
Salaire AVS,python,d4e_ch_payroll_data.REPORT_1,calculation basis,AVS_SALAIRE,d4e_ch_payroll_data.Standard_structure,5001,TRUE,TRUE,result = contract.avs_contribution == 1,code,"if ( employee.date_deb_benefic_rente )and(((employee.emp_age >= 64 and employee.gender == 'female') or (employee.emp_age >= 65)) and employee.date_deb_benefic_rente <= 
                       compute_current_date().date()) :
     result = AVS_BASE - payslip.rule_parameter('plafond_avs_mensuel') - contract.avs_ded_year
elif (employee.emp_age >= 18 or employee.bool_age_18) and (employee.emp_age < 64 or (employee.emp_age < 65 and employee.gender == 'male'))  :
     result = AVS_BASE
else :
     result = 0",tj_imprime,Aucune rubrique,,9
Salaire AC,none,d4e_ch_payroll_data.REPORT_1,calculation basis,AC_SALAIRE,d4e_ch_payroll_data.Standard_structure,5001,TRUE,TRUE,result = contract.ac_contribution == 1,code,"if ((((employee.emp_age >= 64 and employee.gender == 'female') or (employee.emp_age >= 65)) and employee.date_deb_benefic_rente <= compute_current_date().date()) or employee.emp_age < 18 and employee.bool_age_18 ==0):
    result = 0
else :
    if AC_BASE <= payslip.rule_parameter('plafond_ac_mensuel'):
        result = AC_BASE
    if AC_BASE > payslip.rule_parameter('plafond_ac_mensuel'):
        result = payslip.rule_parameter('plafond_ac_mensuel')",tj_imprime,Aucune rubrique,,14
Salaire AC Complémentaire,none,d4e_ch_payroll_data.REPORT_1,calculation basis,ACC_SALAIRE,d4e_ch_payroll_data.Standard_structure,5001,TRUE,TRUE,result = contract.ac_contribution == 1,code,"if ((((employee.emp_age >= 64 and employee.gender == 'female') or (employee.emp_age >= 65)) and employee.date_deb_benefic_rente <= compute_current_date().date()) or employee.emp_age < 18 or payslip.paid_amount < payslip.rule_parameter('plafond_ac_mensuel')):
	result = 0
if AC_BASE > payslip.rule_parameter('plafond_ac_mensuel'):
        result = AC_BASE - payslip.rule_parameter('plafond_ac_mensuel')",tj_imprime,Aucune rubrique,,18
Salaire LAA,none,d4e_ch_payroll_data.REPORT_1,calculation basis,LAA_SALAIRE,d4e_ch_payroll_data.Standard_structure,5001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = LAA_BASE,tj_imprime,Aucune rubrique,,25
Salaire IJM,none,d4e_ch_payroll_data.REPORT_1,calculation basis,IJM_SALAIRE,d4e_ch_payroll_data.Standard_structure,5001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = IJM_BASE,tj_imprime,Aucune rubrique,,33
Salaire LPP,none,d4e_ch_payroll_data.REPORT_1,calculation basis,LPP_SALAIRE,d4e_ch_payroll_data.Standard_structure,5001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = LPP_BASE,tj_imprime,Aucune rubrique,,50
Salaire IS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,IS_SALAIRE,d4e_ch_payroll_data.Standard_structure,5001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = IS_BASE,tj_imprime,Aucune rubrique,,101
Cotisation AVS,python,d4e_ch_payroll_data.DED_1,section,R5010,d4e_ch_payroll_data.Standard_structure,5010,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['avs_contribution'] :
  result = 1
else : 
  result = 0
",code,"result = -AVS_SALAIRE
result_rate = payslip.rule_parameter('taux_avs_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,11
Cotisation AVS - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5010_PP,d4e_ch_payroll_data.Standard_structure,5010,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['avs_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AVS_SALAIRE
result_rate = payslip.rule_parameter('taux_avs_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,12
Cotisation AC,python,d4e_ch_payroll_data.DED_1,section,R5020,d4e_ch_payroll_data.Standard_structure,5020,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['ac_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AC_SALAIRE
result_rate = payslip.rule_parameter('taux_ac_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,15
Cotisation AC - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5020_PP,d4e_ch_payroll_data.Standard_structure,5020,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['ac_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AC_SALAIRE
result_rate = payslip.rule_parameter('taux_ac_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,16
Cotisation AC complémentaire,python,d4e_ch_payroll_data.DED_1,section,R5022,d4e_ch_payroll_data.Standard_structure,5022,TRUE,TRUE,result = (payslip.paid_amount > payslip.rule_parameter('plafond_ac_mensuel')) and (employee.emp_age >= 18) and (employee.emp_age < 64 or (employee.emp_age < 65 and employee.gender == 'male')) and (contract.ac_contribution == 1),code,"result = -ACC_SALAIRE
result_rate = payslip.rule_parameter('taux_accomp_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,19
Cotisation AC complémentaire - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5022_PP,d4e_ch_payroll_data.Standard_structure,5022,TRUE,TRUE,result = (AC_BASE > payslip.rule_parameter('plafond_ac_mensuel')) and employee.emp_age >= 18 and (employee.emp_age < 64 or (employee.emp_age < 65 and employee.gender == 'male')) and (contract.ac_contribution == 1),code,"result = -ACC_SALAIRE
result_rate = payslip.rule_parameter('taux_accomp_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,20
Participation cotisations allocations familiales,python,d4e_ch_payroll_data.DED_1,section,R5027,d4e_ch_payroll_data.Standard_structure,5027,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['avs_contribution'] :
  result = 1
else : 
  result = 0
",code,"result = -AVS_SALAIRE
result_rate = payslip.rule_parameter('taux_allocfam_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,21
Participation cotisations allocations familiales - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5027_PP,d4e_ch_payroll_data.Standard_structure,5027,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['avs_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AVS_SALAIRE
result_rate = payslip.rule_parameter('taux_allocfam_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,22
Assurance accident A1 - Assuré AANP et AAP avec déduction AANP,python,d4e_ch_payroll_data.DED_1,section,R5032,d4e_ch_payroll_data.Standard_structure,5032,TRUE,TRUE,result = contract.laa_contribution == 'A1 - AAP and AANP insured - with AANP deductions',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_a1_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,23
Assurance accident A1 - AAP - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5032_PP,d4e_ch_payroll_data.Standard_structure,5032,TRUE,TRUE,result = contract.laa_contribution == 'A1 - AAP and AANP insured - with AANP deductions',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_a1_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,35
Assurance accident A2 - Assuré AANP et AAP sans déduction AANP - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5033_PP,d4e_ch_payroll_data.Standard_structure,5033,TRUE,TRUE,result = contract.laa_contribution == 'A2 - AAP and AANP insured - without AANP deduction',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_a2_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,26
Assurance accident A3 - Assuré AAP uniquement - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5034_PP,d4e_ch_payroll_data.Standard_structure,5034,TRUE,TRUE,result = contract.laa_contribution == 'A3 - AAP insured only - without AANP deduction',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_a3_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,27
Assurance accident B1 - Assuré AANP et AAP avec déduction AANP,python,d4e_ch_payroll_data.DED_1,section,R5036,d4e_ch_payroll_data.Standard_structure,5036,TRUE,TRUE,result = contract.laa_contribution == 'B1 - AAP and AANP insured - with AANP deductions',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_b1_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,28
Assurance accident B1 - AAP - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5036_PP,d4e_ch_payroll_data.Standard_structure,5036,TRUE,TRUE,result = contract.laa_contribution == 'B1 - AAP and AANP insured - with AANP deductions',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_b1_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,36
Assurance accident B2 - Assuré AANP et AAP sans déduction AANP - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5037_PP,d4e_ch_payroll_data.Standard_structure,5037,TRUE,TRUE,result = contract.laa_contribution == 'B2 - AAP and AANP insured - without AANP deduction',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_b2_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,29
Assurance accident B3 - Assuré AAP seulement - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5038_PP,d4e_ch_payroll_data.Standard_structure,5038,TRUE,TRUE,result = contract.laa_contribution == 'B3 - AAP insured only - without AANP deduction',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_b3_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,30
Cotisation IJM,python,d4e_ch_payroll_data.DED_1,section,R5050,d4e_ch_payroll_data.Standard_structure,5050,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['ijm_contribution'] :
  result = 1
else : 
  result = 0",code,"
if  (employee.gender == 'female')  :
    result = -IJM_BASE
    result_rate = payslip.rule_parameter('taux_ijm_f_employe')
elif (employee.gender == 'male')  :
    result = -IJM_BASE
    result_rate = payslip.rule_parameter('taux_ijm_m_employe')
else :
    result = 0
    result_rate = 0
",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,31
Cotisation IJM - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5050_PP,d4e_ch_payroll_data.Standard_structure,5050,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['ijm_contribution'] :
  result = 1
else : 
  result = 0",code,"
if  (employee.gender == 'female')  :
    result = -IJM_BASE
    result_rate = payslip.rule_parameter('taux_ijm_f_employeur')
elif (employee.gender == 'male')  :
    result = -IJM_BASE
    result_rate = payslip.rule_parameter('taux_ijm_m_employeur')
else :
    result = 0
    result_rate = 0
",tj_imprime,Aucune rubrique,Charges Sociales,34
Cotisation LPP fixe,python,d4e_ch_payroll_data.DED_1,section,R5054,d4e_ch_payroll_data.Standard_structure,5054,TRUE,TRUE,result = contract.lpp_fixe != 0,code,"result = -contract.lpp_fixe
",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,37
Cotisation LPP fixe - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5054_PP,d4e_ch_payroll_data.Standard_structure,5054,TRUE,TRUE,result = contract.lpp_fixe_pp != 0,code,result = contract.lpp_fixe_pp,tj_imprime,Aucune rubrique,Charges Sociales,38
Cotisation LPP coordonnée,python,d4e_ch_payroll_data.DED_1,section,R5055,d4e_ch_payroll_data.Standard_structure,5055,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['lpp_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -LPP_BASE+ payslip.rule_parameter('montant_lpp_coordination')
result_rate = payslip.rule_parameter('taux_lppc_25_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,39
Cotisation LPP coordonnée - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5055_PP,d4e_ch_payroll_data.Standard_structure,5055,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['lpp_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -LPP_BASE+ payslip.rule_parameter('montant_lpp_coordination')
result_rate = payslip.rule_parameter('taux_lppc_25_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,40
Cotisation LPP - Plan A,python,d4e_ch_payroll_data.DED_1,section,R5056,d4e_ch_payroll_data.Standard_structure,5056,TRUE,TRUE,result = contract.lpp_code.code == 'A',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_a_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,41
Cotisation LPP - Plan A - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5056_PP,d4e_ch_payroll_data.Standard_structure,5056,TRUE,TRUE,result = contract.lpp_code.code == 'A',code,"	result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_a_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,42
Cotisation LPP - Plan B,python,d4e_ch_payroll_data.DED_1,section,R5057,d4e_ch_payroll_data.Standard_structure,5057,TRUE,TRUE,result = contract.lpp_code.code == 'B',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_b_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,43
Cotisation LPP - Plan B - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5057_PP,d4e_ch_payroll_data.Standard_structure,5057,TRUE,TRUE,result = contract.lpp_code.code == 'B',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_b_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,44
Cotisation LPP - Plan C,python,d4e_ch_payroll_data.DED_1,section,R5058,d4e_ch_payroll_data.Standard_structure,5058,TRUE,TRUE,result = contract.lpp_code.code == 'C',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_c_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,45
Cotisation LPP - Plan C - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5058_PP,d4e_ch_payroll_data.Standard_structure,5058,TRUE,TRUE,result = contract.lpp_code.code == 'C',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_c_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,46
Cotisation LPP - Plan D,python,d4e_ch_payroll_data.DED_1,section,R5059,d4e_ch_payroll_data.Standard_structure,5059,TRUE,TRUE,result = contract.lpp_code.code == 'D',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_d_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,47
Cotisation LPP - Plan D - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5059_PP,d4e_ch_payroll_data.Standard_structure,5059,TRUE,TRUE,result = contract.lpp_code.code == 'D',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_d_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,48
Retenue Impôt à la source,python,d4e_ch_payroll_data.DED_1,section,R5060,d4e_ch_payroll_data.Standard_structure,5060,TRUE,TRUE,result = contract.tax_source == 'submitted_without_scale',code,"result = -IS_SALAIRE
result_rate = contract.tax_rate * 100",tj_imprime,"12 Retenue de l""impôt à la source",Charges Sociales,102
Retenue Impôt à la source - Tabelle,python,d4e_ch_payroll_data.DED_1,section,R5061,d4e_ch_payroll_data.Standard_structure,5061,TRUE,TRUE,"result = contract.tax_source == 'submitted_with_scale'
",code,"result =-IS_BASE
if contract.canton:
  canton = contract.canton.upper()
if contract.tabelle:
  tabelle = contract.tabelle
if contract.church_tax == 'true':
  church_tax = 'Y'
else:
  church_tax = 'N'
valeur_prec = 0
result_2 = 0
i=0
for element in tax_base:
  if(( i==0 )and(tax_base[element]['perception_scale']== tabelle ) and (tax_base[element]['canton']==canton) and (tax_base[element]['impot ecclésiastique']==church_tax) and (tax_base[element]['revenue'] > abs(result) )):
    result_2 = tax_base[element]['impot']
    break
  else:
    if ((tax_base[element]['perception_scale']== tabelle ) and (tax_base[element]['canton']==canton) and (tax_base[element]['impot ecclésiastique']==church_tax) and (tax_base[element]['revenue'] >  abs(result) )):
      result_2 = valeur_prec
      break
    else :
     valeur_prec =tax_base[element]['impot']
     i+=1
result_rate = result_2
",tj_imprime,"12 Retenue de l""impôt à la source",Charges Sociales,129
Correction Impôt à la source,none,d4e_ch_payroll_data.DED_1,section,R5062,d4e_ch_payroll_data.Standard_structure,5062,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A5061: 
	for element in inputs.A5061:
		result += element.amount",none_zero_imprime,"12 Retenue de l""impôt à la source",Charges Sociales,131
Retenue Part privée voiture de service,none,d4e_ch_payroll_data.FREE_1,section,R5090,d4e_ch_payroll_data.Standard_structure,5090,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = -contract.private_share_service_car,tj_imprime,Aucune rubrique,Divers,116
Frais de voyage,none,d4e_ch_payroll_data.FREE_1,section,R6000,d4e_ch_payroll_data.Standard_structure,6000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6000: 
	for element in inputs.A6000:
		result += element.amount",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,103
Frais de voiture,none,d4e_ch_payroll_data.FREE_1,section,R6001,d4e_ch_payroll_data.Standard_structure,6001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6001: 
	for element in inputs.A6001:
		result += element.amount",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,104
Frais de repas,none,d4e_ch_payroll_data.FREE_1,section,R6002,d4e_ch_payroll_data.Standard_structure,6002,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = payslip.rule_parameter('frais_repas') if inputs.A6002 else 0 
result_qty = inputs.A6002.amount if inputs.A6002 else 0",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,105
Frais de repas effectifs,none,d4e_ch_payroll_data.FREE_1,section,R6003,d4e_ch_payroll_data.Standard_structure,6003,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6003: 
	for element in inputs.A6003:
		result += element.amount",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,276
Frais de déplacement KM,none,d4e_ch_payroll_data.FREE_1,section,R6005,d4e_ch_payroll_data.Standard_structure,6005,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = payslip.rule_parameter('frais_km') if inputs.A6005 else 0 
result_qty = inputs.A6005.amount if inputs.A6005 else 0",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,285
Frais de nuitées,none,d4e_ch_payroll_data.FREE_1,section,R6010,d4e_ch_payroll_data.Standard_structure,6010,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6010: 
	for element in inputs.A6010:
		result += element.amount",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,106
Frais effectifs,none,d4e_ch_payroll_data.FREE_1,section,R6020,d4e_ch_payroll_data.Standard_structure,6020,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6020: 
	for element in inputs.A6020:
		result += element.amount",none_zero_imprime,13.1.2 Frais effectifs (autres),Divers,107
Autres frais effectifs,none,d4e_ch_payroll_data.FREE_1,section,R6030,d4e_ch_payroll_data.Standard_structure,6030,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6030: 
	for element in inputs.A6030:
		result += element.amount",none_zero_imprime,13.1.2 Frais effectifs (autres),Divers,108
Frais forfaitaire de représentation,none,d4e_ch_payroll_data.FREE_1,section,R6040,d4e_ch_payroll_data.Standard_structure,6040,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.lump_sum_representation_costs,none_zero_imprime,13.2.1 Frais forfaitaires (représentation),Divers,109
Frais forfaitaire de voiture,none,d4e_ch_payroll_data.FREE_1,section,R6050,d4e_ch_payroll_data.Standard_structure,6050,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.Car_flat_fee,none_zero_imprime,13.2.2 Frais forfaitaires (voiture) ,Divers,110
Frais forfaitaire pour expatriés,none,d4e_ch_payroll_data.FREE_1,section,R6060,d4e_ch_payroll_data.Standard_structure,6060,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.Flat_rate_for_expatriates,none_zero_imprime,2.3 Prestations salariales accessoires (autres),Divers,111
Autres frais forfaitaires,none,d4e_ch_payroll_data.FREE_1,section,R6070,d4e_ch_payroll_data.Standard_structure,6070,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.Other_flat_rate_costs,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,112
Corrections diverses,none,d4e_ch_payroll_data.FREE_1,section,R6090,d4e_ch_payroll_data.Standard_structure,6090,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6050: 
	for element in inputs.A6050:
		result += element.amount",none_zero_imprime,Aucune rubrique,Divers,286
Retenue pour loyer,none,d4e_ch_payroll_data.FREE_1,section,R6100,d4e_ch_payroll_data.Standard_structure,6100,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = -contract.rent_deduction,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,125
Retenue pour office des poursuites,none,d4e_ch_payroll_data.FREE_1,section,R6101,d4e_ch_payroll_data.Standard_structure,6101,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = -contract.withholding_prosecution_office,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,126
Divers 1,none,d4e_ch_payroll_data.FREE_1,section,R6110,d4e_ch_payroll_data.Standard_structure,6110,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.various1,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,127
Divers 2,none,d4e_ch_payroll_data.FREE_1,section,R6111,d4e_ch_payroll_data.Standard_structure,6111,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.various2,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,128
Nombre de fiche de salaire,none,d4e_ch_payroll_data.REPORT_1,storage data,001,d4e_ch_payroll_data.mensuel_structure,1,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = employee.hr_payslip_number,tj_imprime,Aucune rubrique,,404
Cumul AVS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,002,d4e_ch_payroll_data.mensuel_structure,2,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('AVS_BASE'):
  for m in table_calcul_base['AVS_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['AVS_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,405
Cumul AC,none,d4e_ch_payroll_data.REPORT_1,calculation basis,003,d4e_ch_payroll_data.mensuel_structure,3,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('AC_BASE'):
  for m in table_calcul_base['AC_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['AC_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,413
Cumul LAA,none,d4e_ch_payroll_data.REPORT_1,calculation basis,004,d4e_ch_payroll_data.mensuel_structure,4,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('LAA_BASE'):
  for m in table_calcul_base['LAA_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['LAA_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,414
Cumul IJM,none,d4e_ch_payroll_data.REPORT_1,calculation basis,005,d4e_ch_payroll_data.mensuel_structure,5,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('IJM_BASE'):
  for m in table_calcul_base['IJM_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['IJM_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,415
Cumul LPP,none,d4e_ch_payroll_data.REPORT_1,calculation basis,006,d4e_ch_payroll_data.mensuel_structure,6,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('LPP_BASE'):
  for m in table_calcul_base['LPP_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['LPP_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,416
Cumul ACC,none,d4e_ch_payroll_data.REPORT_1,calculation basis,007,d4e_ch_payroll_data.mensuel_structure,7,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('ACC_BASE'):
  for m in table_calcul_base['ACC_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['ACC_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,417
Cumul IS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,008,d4e_ch_payroll_data.mensuel_structure,8,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('IS_BASE'):
  for m in table_calcul_base['IS_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['IS_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,418
Cumul Vacances,none,d4e_ch_payroll_data.REPORT_1,calculation basis,009,d4e_ch_payroll_data.mensuel_structure,9,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('VAC_BASE'):
  for m in table_calcul_base['VAC_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['VAC_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,425
Salaire mensuel,none,d4e_ch_payroll_data.GROSS_1,section,R1000,d4e_ch_payroll_data.mensuel_structure,1000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.wage,tj_imprime,1 Salaire / Rente,Salaire Brut,289
Correction salaire mensuel,none,d4e_ch_payroll_data.GROSS_1,section,R1001,d4e_ch_payroll_data.mensuel_structure,1001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1001: 
	for element in inputs.A1001:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,411
Honoraires,none,d4e_ch_payroll_data.GROSS_1,section,R1010,d4e_ch_payroll_data.mensuel_structure,1010,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1010: 
	for element in inputs.A1010:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,293
Heures supplémentaires à 125%,none,d4e_ch_payroll_data.GROSS_1,section,R1061,d4e_ch_payroll_data.mensuel_structure,1061,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1061: 
	for element in inputs.A1061:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,336
Heures supplémentaires,none,d4e_ch_payroll_data.GROSS_1,section,R1065,d4e_ch_payroll_data.mensuel_structure,1065,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1065: 
	for element in inputs.A1065:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,337
Indemnité travail par équipes,none,d4e_ch_payroll_data.GROSS_1,section,R1070,d4e_ch_payroll_data.mensuel_structure,1070,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1070: 
	for element in inputs.A1070:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,338
Indemnité pour service de piquet,none,d4e_ch_payroll_data.GROSS_1,section,R1071,d4e_ch_payroll_data.mensuel_structure,1071,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1071: 
	for element in inputs.A1071:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,339
Indemnité d'engagement,none,d4e_ch_payroll_data.GROSS_1,section,R1072,d4e_ch_payroll_data.mensuel_structure,1072,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1072: 
	for element in inputs.A1072:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,340
Indemnité pour travail dominical,none,d4e_ch_payroll_data.GROSS_1,section,R1073,d4e_ch_payroll_data.mensuel_structure,1073,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1073: 
	for element in inputs.A1073:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,341
Indemnité pour inconvénients,none,d4e_ch_payroll_data.GROSS_1,section,R1074,d4e_ch_payroll_data.mensuel_structure,1074,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1074: 
	for element in inputs.A1074:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,342
Indemnité pour service de nuit,none,d4e_ch_payroll_data.GROSS_1,section,R1075,d4e_ch_payroll_data.mensuel_structure,1075,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1075: 
	for element in inputs.A1075:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,343
Indemnité pour travail de nuit,none,d4e_ch_payroll_data.GROSS_1,section,R1076,d4e_ch_payroll_data.mensuel_structure,1076,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1076: 
	for element in inputs.A1076:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,344
Indemnités inconvénients du chantier,none,d4e_ch_payroll_data.GROSS_1,section,R1100,d4e_ch_payroll_data.mensuel_structure,1100,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1100: 
	for element in inputs.A1100:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,345
Indemnité pour travail pénible,none,d4e_ch_payroll_data.GROSS_1,section,R1101,d4e_ch_payroll_data.mensuel_structure,1101,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1101: 
	for element in inputs.A1101:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,,346
Indemnité pour travail salissant,none,d4e_ch_payroll_data.GROSS_1,section,R1102,d4e_ch_payroll_data.mensuel_structure,1102,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1102: 
	for element in inputs.A1102:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,347
Indemnité pour poussière,none,d4e_ch_payroll_data.GROSS_1,section,R1103,d4e_ch_payroll_data.mensuel_structure,1103,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1103: 
	for element in inputs.A1103:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,348
Indemnité pour travaux souterrains,none,d4e_ch_payroll_data.GROSS_1,section,R1104,d4e_ch_payroll_data.mensuel_structure,1104,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1104: 
	for element in inputs.A1104:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,349
Avancement,none,d4e_ch_payroll_data.GROSS_1,section,R1110,d4e_ch_payroll_data.mensuel_structure,1110,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1110: 
	for element in inputs.A1110:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,350
Prime pour percement,none,d4e_ch_payroll_data.GROSS_1,section,R1111,d4e_ch_payroll_data.mensuel_structure,1111,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1111: 
	for element in inputs.A1111:
		result += element.amount",tj_imprime,3 Prestations non périodiques,Salaire Brut,351
Prime pour ténacité,none,d4e_ch_payroll_data.GROSS_1,section,R1112,d4e_ch_payroll_data.mensuel_structure,1112,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1112: 
	for element in inputs.A1112:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,352
Prime d'engagement,none,d4e_ch_payroll_data.GROSS_1,section,R1130,d4e_ch_payroll_data.mensuel_structure,1130,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1130: 
	for element in inputs.A1130:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,353
Indemnité de non-engagement,none,d4e_ch_payroll_data.GROSS_1,section,R1131,d4e_ch_payroll_data.mensuel_structure,1131,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1131: 
	for element in inputs.A1131:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,354
Indemnité de vacances,none,d4e_ch_payroll_data.GROSS_1,section,R1160,d4e_ch_payroll_data.mensuel_structure,1160,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1160: 
	for element in inputs.A1160:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,355
Indemnité pour jours fériés,none,d4e_ch_payroll_data.GROSS_1,section,R1161,d4e_ch_payroll_data.mensuel_structure,1161,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1161: 
	for element in inputs.A1161:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,356
13e salaire payé,none,d4e_ch_payroll_data.GROSS_1,section,R1181,d4e_ch_payroll_data.mensuel_structure,1181,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1181: 
	for element in inputs.A1181:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,359
Gratification,none,d4e_ch_payroll_data.GROSS_1,section,R1201,d4e_ch_payroll_data.mensuel_structure,1201,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1201: 
	for element in inputs.A1201:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,360
Gratification de Noël,none,d4e_ch_payroll_data.GROSS_1,section,R1202,d4e_ch_payroll_data.mensuel_structure,1202,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1202: 
	for element in inputs.A1202:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,361
Bonus,none,d4e_ch_payroll_data.GROSS_1,section,R1210,d4e_ch_payroll_data.mensuel_structure,1210,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1210: 
	for element in inputs.A1210:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,362
Participation aux bénéfices,none,d4e_ch_payroll_data.GROSS_1,section,R1211,d4e_ch_payroll_data.mensuel_structure,1211,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1211: 
	for element in inputs.A1211:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,363
Allocation spéciale,none,d4e_ch_payroll_data.GROSS_1,section,R1212,d4e_ch_payroll_data.mensuel_structure,1212,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1212: 
	for element in inputs.A1212:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,364
Prime de succès,none,d4e_ch_payroll_data.GROSS_1,section,R1213,d4e_ch_payroll_data.mensuel_structure,1213,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1213: 
	for element in inputs.A1213:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,365
Prime de rendement,none,d4e_ch_payroll_data.GROSS_1,section,R1214,d4e_ch_payroll_data.mensuel_structure,1214,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1214: 
	for element in inputs.A1214:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,366
Prime de reconnaissance,none,d4e_ch_payroll_data.GROSS_1,section,R1215,d4e_ch_payroll_data.mensuel_structure,1215,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1215: 
	for element in inputs.A1215:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,367
Prime pour propositions d'amélioration,none,d4e_ch_payroll_data.GROSS_1,section,R1216,d4e_ch_payroll_data.mensuel_structure,1216,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1216: 
	for element in inputs.A1216:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,368
Prime sur chiffre d'affaires,none,d4e_ch_payroll_data.GROSS_1,section,R1217,d4e_ch_payroll_data.mensuel_structure,1217,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1217: 
	for element in inputs.A1217:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,369
Commission,none,d4e_ch_payroll_data.GROSS_1,section,R1218,d4e_ch_payroll_data.mensuel_structure,1218,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1218: 
	for element in inputs.A1218:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,370
Prime de présence,none,d4e_ch_payroll_data.GROSS_1,section,R1219,d4e_ch_payroll_data.mensuel_structure,1219,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1219: 
	for element in inputs.A1219:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,371
Cadeau pour ancienneté de service,none,d4e_ch_payroll_data.GROSS_1,section,R1230,d4e_ch_payroll_data.mensuel_structure,1230,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1230: 
	for element in inputs.A1230:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,372
Cadeau de jubilé,none,d4e_ch_payroll_data.GROSS_1,section,R1231,d4e_ch_payroll_data.mensuel_structure,1231,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1231: 
	for element in inputs.A1231:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,373
Prime de fidélité,none,d4e_ch_payroll_data.GROSS_1,section,R1232,d4e_ch_payroll_data.mensuel_structure,1232,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1232: 
	for element in inputs.A1232:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,374
Prime pour prévention de dommages,none,d4e_ch_payroll_data.GROSS_1,section,R1250,d4e_ch_payroll_data.mensuel_structure,1250,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1250: 
	for element in inputs.A1250:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,375
Salaire en cas d'accident,none,d4e_ch_payroll_data.GROSS_1,section,R1300,d4e_ch_payroll_data.mensuel_structure,1300,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1300: 
	for element in inputs.A1300:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,376
Salaire en cas de maladie,none,d4e_ch_payroll_data.GROSS_1,section,R1301,d4e_ch_payroll_data.mensuel_structure,1301,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1301: 
	for element in inputs.A1301:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,377
"Salaire service militaire, protection civile",none,d4e_ch_payroll_data.GROSS_1,section,R1302,d4e_ch_payroll_data.mensuel_structure,1302,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1302: 
	for element in inputs.A1302:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,378
Salaire formation et perfectionnement,none,d4e_ch_payroll_data.GROSS_1,section,R1303,d4e_ch_payroll_data.mensuel_structure,1303,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1303: 
	for element in inputs.A1303:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,379
Part privée voiture de service,none,d4e_ch_payroll_data.GROSS_1,section,R1910,d4e_ch_payroll_data.mensuel_structure,1910,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.private_share_service_car,none_zero_imprime,Aucune rubrique,Salaire Brut,380
Indemnité accident,none,d4e_ch_payroll_data.INDEMNITES_1,section,R2030,d4e_ch_payroll_data.mensuel_structure,2030,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A2030: 
	for element in inputs.A2030:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,381
Indemnité maladie,none,d4e_ch_payroll_data.INDEMNITES_1,section,R2035,d4e_ch_payroll_data.mensuel_structure,2035,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A2035: 
	for element in inputs.A2035:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,382
Indemnité maternité,none,d4e_ch_payroll_data.INDEMNITES_1,section,R2040,d4e_ch_payroll_data.mensuel_structure,2040,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A2040: 
	for element in inputs.A2040:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,383
Correction indemnités de tiers,none,d4e_ch_payroll_data.GROSS_1,section,R2050,d4e_ch_payroll_data.mensuel_structure,2050,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A2050: 
	for element in inputs.A2050:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,384
Allocations familiales,none,d4e_ch_payroll_data.ALW_1,section,R3030,d4e_ch_payroll_data.mensuel_structure,3030,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.allocation_for_child,none_zero_imprime,Aucune rubrique,Salaire Brut,400
Base AVS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,AVS_BASE,d4e_ch_payroll_data.mensuel_structure,5000,TRUE,TRUE,“ ”,code,result = categories.BRUT+categories.VACANCES,tj_imprime,Aucune rubrique,,295
Base AC,none,d4e_ch_payroll_data.REPORT_1,calculation basis,AC_BASE,d4e_ch_payroll_data.mensuel_structure,5000,TRUE,TRUE,“ ”,code,result = categories.BRUT+categories.VACANCES,tj_imprime,Aucune rubrique,,298
Base AC Complémentaire,none,d4e_ch_payroll_data.REPORT_1,calculation basis,ACC_BASE,d4e_ch_payroll_data.mensuel_structure,5000,TRUE,TRUE,result = contract.ac_contribution == 1,code,"if AC_BASE <= payslip.rule_parameter('plafond_ac_mensuel'):
        result = 0
if AC_BASE > payslip.rule_parameter('plafond_ac_mensuel'):
        result = categories.BRUT +categories.VACANCES - payslip.rule_parameter('plafond_ac_mensuel')",tj_imprime,Aucune rubrique,,302
Base LAA,none,d4e_ch_payroll_data.REPORT_1,calculation basis,LAA_BASE,d4e_ch_payroll_data.mensuel_structure,5000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"if payslip.paid_amount <= payslip.rule_parameter('plafond_laa_mensuel'):
    result = categories.BRUT+categories.VACANCES
if payslip.paid_amount > payslip.rule_parameter('plafond_laa_mensuel'):
    result = payslip.rule_parameter('plafond_laa_mensuel')",tj_imprime,Aucune rubrique,,309
Base IJM,none,d4e_ch_payroll_data.REPORT_1,calculation basis,IJM_BASE,d4e_ch_payroll_data.mensuel_structure,5000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"if payslip.paid_amount <= payslip.rule_parameter('plafond_ijm_mensuel'):
    result = categories.BRUT+categories.VACANCES
if payslip.paid_amount > payslip.rule_parameter('plafond_ijm_mensuel'):
    result = payslip.rule_parameter('plafond_ijm_mensuel')",tj_imprime,Aucune rubrique,,317
Base LPP,none,d4e_ch_payroll_data.REPORT_1,calculation basis,LPP_BASE,d4e_ch_payroll_data.mensuel_structure,5000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"if payslip.paid_amount <= payslip.rule_parameter('plafond_lpp_mensuel'):
    result = categories.BRUT+categories.VACANCES
if payslip.paid_amount > payslip.rule_parameter('plafond_lpp_mensuel'):
    result = payslip.rule_parameter('plafond_lpp_mensuel')",tj_imprime,Aucune rubrique,,334
Base IS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,IS_BASE,d4e_ch_payroll_data.mensuel_structure,5000,TRUE,TRUE,“ ”,code,result = categories.BRUT + categories.INDEMNITES +categories.VACANCES,tj_imprime,Aucune rubrique,,385
Base Vacances,none,d4e_ch_payroll_data.REPORT_1,calculation basis,VAC_BASE,d4e_ch_payroll_data.mensuel_structure,5000,TRUE,FALSE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = categories.BRUT,tj_imprime,Aucune rubrique,,424
Salaire AVS,python,d4e_ch_payroll_data.REPORT_1,calculation basis,AVS_SALAIRE,d4e_ch_payroll_data.mensuel_structure,5001,TRUE,TRUE,result = contract.avs_contribution == 1,code,"if ( employee.date_deb_benefic_rente )and(((employee.emp_age >= 64 and employee.gender == 'female') or (employee.emp_age >= 65)) and employee.date_deb_benefic_rente <= 
                       compute_current_date().date()) :
     result = AVS_BASE - payslip.rule_parameter('plafond_avs_mensuel') - contract.avs_ded_year
elif (employee.emp_age >= 18 or employee.bool_age_18) and (employee.emp_age < 64 or (employee.emp_age < 65 and employee.gender == 'male'))  :
     result = AVS_BASE
else :
     result = 0",tj_imprime,Aucune rubrique,,294
Salaire AC,none,d4e_ch_payroll_data.REPORT_1,calculation basis,AC_SALAIRE,d4e_ch_payroll_data.mensuel_structure,5001,TRUE,TRUE,result = contract.ac_contribution == 1,code,"if ((((employee.emp_age >= 64 and employee.gender == 'female') or (employee.emp_age >= 65)) and employee.date_deb_benefic_rente <= compute_current_date().date()) or employee.emp_age < 18 and employee.bool_age_18 ==0):
    result = 0
else :
    if AC_BASE <= payslip.rule_parameter('plafond_ac_mensuel'):
        result = AC_BASE
    if AC_BASE > payslip.rule_parameter('plafond_ac_mensuel'):
        result = payslip.rule_parameter('plafond_ac_mensuel')",tj_imprime,Aucune rubrique,,299
Salaire AC Complémentaire,none,d4e_ch_payroll_data.REPORT_1,calculation basis,ACC_SALAIRE,d4e_ch_payroll_data.mensuel_structure,5001,TRUE,TRUE,result = contract.ac_contribution == 1,code,"if ((((employee.emp_age >= 64 and employee.gender == 'female') or (employee.emp_age >= 65)) and employee.date_deb_benefic_rente <= compute_current_date().date()) or employee.emp_age < 18 or payslip.paid_amount < payslip.rule_parameter('plafond_ac_mensuel')):
	result = 0
if AC_BASE > payslip.rule_parameter('plafond_ac_mensuel'):
        result = AC_BASE - payslip.rule_parameter('plafond_ac_mensuel')",tj_imprime,Aucune rubrique,,303
Salaire LAA,none,d4e_ch_payroll_data.REPORT_1,calculation basis,LAA_SALAIRE,d4e_ch_payroll_data.mensuel_structure,5001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = LAA_BASE,tj_imprime,Aucune rubrique,,310
Salaire IJM,none,d4e_ch_payroll_data.REPORT_1,calculation basis,IJM_SALAIRE,d4e_ch_payroll_data.mensuel_structure,5001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = IJM_BASE,tj_imprime,Aucune rubrique,,318
Salaire LPP,none,d4e_ch_payroll_data.REPORT_1,calculation basis,LPP_SALAIRE,d4e_ch_payroll_data.mensuel_structure,5001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = LPP_BASE,tj_imprime,Aucune rubrique,,335
Salaire IS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,IS_SALAIRE,d4e_ch_payroll_data.mensuel_structure,5001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = IS_BASE,tj_imprime,Aucune rubrique,,386
Cotisation AVS,python,d4e_ch_payroll_data.DED_1,section,R5010,d4e_ch_payroll_data.mensuel_structure,5010,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['avs_contribution'] :
  result = 1
else : 
  result = 0
",code,"result = -AVS_SALAIRE
result_rate = payslip.rule_parameter('taux_avs_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,296
Cotisation AVS - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5010_PP,d4e_ch_payroll_data.mensuel_structure,5010,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['avs_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AVS_SALAIRE
result_rate = payslip.rule_parameter('taux_avs_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,297
Cotisation AC,python,d4e_ch_payroll_data.DED_1,section,R5020,d4e_ch_payroll_data.mensuel_structure,5020,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['ac_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AC_SALAIRE
result_rate = payslip.rule_parameter('taux_ac_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,300
Cotisation AC - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5020_PP,d4e_ch_payroll_data.mensuel_structure,5020,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['ac_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AC_SALAIRE
result_rate = payslip.rule_parameter('taux_ac_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,301
Cotisation AC complémentaire,python,d4e_ch_payroll_data.DED_1,section,R5022,d4e_ch_payroll_data.mensuel_structure,5022,TRUE,TRUE,result = (payslip.paid_amount > payslip.rule_parameter('plafond_ac_mensuel')) and (employee.emp_age >= 18) and (employee.emp_age < 64 or (employee.emp_age < 65 and employee.gender == 'male')) and (contract.ac_contribution == 1),code,"result = -ACC_SALAIRE
result_rate = payslip.rule_parameter('taux_accomp_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,304
Cotisation AC complémentaire - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5022_PP,d4e_ch_payroll_data.mensuel_structure,5022,TRUE,TRUE,result = (AC_BASE > payslip.rule_parameter('plafond_ac_mensuel')) and employee.emp_age >= 18 and (employee.emp_age < 64 or (employee.emp_age < 65 and employee.gender == 'male')) and (contract.ac_contribution == 1),code,"result = -ACC_SALAIRE
result_rate = payslip.rule_parameter('taux_accomp_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,305
Participation cotisations allocations familiales,python,d4e_ch_payroll_data.DED_1,section,R5027,d4e_ch_payroll_data.mensuel_structure,5027,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['avs_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AVS_SALAIRE
result_rate = payslip.rule_parameter('taux_allocfam_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,306
Participation cotisations allocations familiales - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5027_PP,d4e_ch_payroll_data.mensuel_structure,5027,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['avs_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AVS_SALAIRE
result_rate = payslip.rule_parameter('taux_allocfam_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,307
Assurance accident A1 - Assuré AANP et AAP avec déduction AANP,python,d4e_ch_payroll_data.DED_1,section,R5032,d4e_ch_payroll_data.mensuel_structure,5032,TRUE,TRUE,result = contract.laa_contribution == 'A1 - AAP and AANP insured - with AANP deductions',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_a1_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,308
Assurance accident A1 - AAP - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5032_PP,d4e_ch_payroll_data.mensuel_structure,5032,TRUE,TRUE,result = contract.laa_contribution == 'A1 - AAP and AANP insured - with AANP deductions',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_a1_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,320
Assurance accident A2 - Assuré AANP et AAP sans déduction AANP - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5033_PP,d4e_ch_payroll_data.mensuel_structure,5033,TRUE,TRUE,result = contract.laa_contribution == 'A2 - AAP and AANP insured - without AANP deduction',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_a2_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,311
Assurance accident A3 - Assuré AAP uniquement - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5034_PP,d4e_ch_payroll_data.mensuel_structure,5034,TRUE,TRUE,result = contract.laa_contribution == 'A3 - AAP insured only - without AANP deduction',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_a3_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,312
Assurance accident B1 - Assuré AANP et AAP avec déduction AANP,python,d4e_ch_payroll_data.DED_1,section,R5036,d4e_ch_payroll_data.mensuel_structure,5036,TRUE,TRUE,result = contract.laa_contribution == 'B1 - AAP and AANP insured - with AANP deductions',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_b1_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,313
Assurance accident B1 - AAP - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5036_PP,d4e_ch_payroll_data.mensuel_structure,5036,TRUE,TRUE,result = contract.laa_contribution == 'B1 - AAP and AANP insured - with AANP deductions',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_b1_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,321
Assurance accident B2 - Assuré AANP et AAP sans déduction AANP - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5037_PP,d4e_ch_payroll_data.mensuel_structure,5037,TRUE,TRUE,result = contract.laa_contribution == 'B2 - AAP and AANP insured - without AANP deduction',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_b2_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,314
Assurance accident B3 - Assuré AAP seulement - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5038_PP,d4e_ch_payroll_data.mensuel_structure,5038,TRUE,TRUE,result = contract.laa_contribution == 'B3 - AAP insured only - without AANP deduction',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_b3_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,315
Cotisation IJM,python,d4e_ch_payroll_data.DED_1,section,R5050,d4e_ch_payroll_data.mensuel_structure,5050,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['ijm_contribution'] :
  result = 1
else : 
  result = 0",code,"
if  (employee.gender == 'female')  :
    result = -IJM_BASE
    result_rate = payslip.rule_parameter('taux_ijm_f_employe')
elif (employee.gender == 'male')  :
    result = -IJM_BASE
    result_rate = payslip.rule_parameter('taux_ijm_m_employe')
else :
    result = 0
    result_rate = 0
",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,316
Cotisation IJM - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5050_PP,d4e_ch_payroll_data.mensuel_structure,5050,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['ijm_contribution'] :
  result = 1
else : 
  result = 0",code,"
if  (employee.gender == 'female')  :
    result = -IJM_BASE
    result_rate = payslip.rule_parameter('taux_ijm_f_employeur')
elif (employee.gender == 'male')  :
    result = -IJM_BASE
    result_rate = payslip.rule_parameter('taux_ijm_m_employeur')
else :
    result = 0
    result_rate = 0
",tj_imprime,Aucune rubrique,Charges Sociales,319
Cotisation LPP fixe,python,d4e_ch_payroll_data.DED_1,section,R5054,d4e_ch_payroll_data.mensuel_structure,5054,TRUE,TRUE,result = contract.lpp_fixe != 0,code,"result = -contract.lpp_fixe
",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,322
Cotisation LPP fixe - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5054_PP,d4e_ch_payroll_data.mensuel_structure,5054,TRUE,TRUE,result = contract.lpp_fixe_pp != 0,code,result = contract.lpp_fixe_pp,tj_imprime,Aucune rubrique,Charges Sociales,323
Cotisation LPP coordonnée,python,d4e_ch_payroll_data.DED_1,section,R5055,d4e_ch_payroll_data.mensuel_structure,5055,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['lpp_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -LPP_BASE+ payslip.rule_parameter('montant_lpp_coordination')
result_rate = payslip.rule_parameter('taux_lppc_25_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,324
Cotisation LPP coordonnée - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5055_PP,d4e_ch_payroll_data.mensuel_structure,5055,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['lpp_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -LPP_BASE+ payslip.rule_parameter('montant_lpp_coordination')
result_rate = payslip.rule_parameter('taux_lppc_25_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,325
Cotisation LPP - Plan A,python,d4e_ch_payroll_data.DED_1,section,R5056,d4e_ch_payroll_data.mensuel_structure,5056,TRUE,TRUE,result = contract.lpp_code.code == 'A',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_a_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,326
Cotisation LPP - Plan A - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5056_PP,d4e_ch_payroll_data.mensuel_structure,5056,TRUE,TRUE,result = contract.lpp_code.code == 'A',code,"	result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_a_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,327
Cotisation LPP - Plan B,python,d4e_ch_payroll_data.DED_1,section,R5057,d4e_ch_payroll_data.mensuel_structure,5057,TRUE,TRUE,result = contract.lpp_code.code == 'B',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_b_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,328
Cotisation LPP - Plan B - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5057_PP,d4e_ch_payroll_data.mensuel_structure,5057,TRUE,TRUE,result = contract.lpp_code.code == 'B',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_b_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,329
Cotisation LPP - Plan C,python,d4e_ch_payroll_data.DED_1,section,R5058,d4e_ch_payroll_data.mensuel_structure,5058,TRUE,TRUE,result = contract.lpp_code.code == 'C',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_c_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,330
Cotisation LPP - Plan C - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5058_PP,d4e_ch_payroll_data.mensuel_structure,5058,TRUE,TRUE,result = contract.lpp_code.code == 'C',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_c_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,331
Cotisation LPP - Plan D,python,d4e_ch_payroll_data.DED_1,section,R5059,d4e_ch_payroll_data.mensuel_structure,5059,TRUE,TRUE,result = contract.lpp_code.code == 'D',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_d_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,332
Cotisation LPP - Plan D - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5059_PP,d4e_ch_payroll_data.mensuel_structure,5059,TRUE,TRUE,result = contract.lpp_code.code == 'D',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_d_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,333
Retenue Impôt à la source,python,d4e_ch_payroll_data.DED_1,section,R5060,d4e_ch_payroll_data.mensuel_structure,5060,TRUE,TRUE,result = contract.tax_source == 'submitted_without_scale',code,"result = -IS_SALAIRE
result_rate = contract.tax_rate * 100",tj_imprime,"12 Retenue de l""impôt à la source",Charges Sociales,387
Retenue Impôt à la source - Tabelle,python,d4e_ch_payroll_data.DED_1,section,R5061,d4e_ch_payroll_data.mensuel_structure,5061,TRUE,TRUE,"result = contract.tax_source == 'submitted_with_scale'
",code,"result =-IS_BASE
if contract.canton:
  canton = contract.canton.upper()
if contract.tabelle:
  tabelle = contract.tabelle
if contract.church_tax == 'true':
  church_tax = 'Y'
else:
  church_tax = 'N'
valeur_prec = 0
result_2 = 0
i=0
for element in tax_base:
  if(( i==0 )and(tax_base[element]['perception_scale']== tabelle ) and (tax_base[element]['canton']==canton) and (tax_base[element]['impot ecclésiastique']==church_tax) and (tax_base[element]['revenue'] > abs(result) )):
    result_2 = tax_base[element]['impot']
    break
  else:
    if ((tax_base[element]['perception_scale']== tabelle ) and (tax_base[element]['canton']==canton) and (tax_base[element]['impot ecclésiastique']==church_tax) and (tax_base[element]['revenue'] >  abs(result) )):
      result_2 = valeur_prec
      break
    else :
     valeur_prec =tax_base[element]['impot']
     i+=1
result_rate = result_2
",tj_imprime,"12 Retenue de l""impôt à la source",Charges Sociales,410
Correction Impôt à la source,none,d4e_ch_payroll_data.DED_1,section,R5062,d4e_ch_payroll_data.mensuel_structure,5062,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A5061: 
	for element in inputs.A5061:
		result += element.amount",none_zero_imprime,"12 Retenue de l""impôt à la source",Charges Sociales,412
Retenue Part privée voiture de service,none,d4e_ch_payroll_data.FREE_1,section,R5090,d4e_ch_payroll_data.mensuel_structure,5090,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = -contract.private_share_service_car,tj_imprime,Aucune rubrique,Divers,401
Frais de voyage,none,d4e_ch_payroll_data.FREE_1,section,R6000,d4e_ch_payroll_data.mensuel_structure,6000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6000: 
	for element in inputs.A6000:
		result += element.amount",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,388
Frais de voiture,none,d4e_ch_payroll_data.FREE_1,section,R6001,d4e_ch_payroll_data.mensuel_structure,6001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6001: 
	for element in inputs.A6001:
		result += element.amount",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,389
Frais de repas,none,d4e_ch_payroll_data.FREE_1,section,R6002,d4e_ch_payroll_data.mensuel_structure,6002,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = payslip.rule_parameter('frais_repas') if inputs.A6002 else 0 
result_qty = inputs.A6002.amount if inputs.A6002 else 0",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,390
Frais de repas effectifs,none,d4e_ch_payroll_data.FREE_1,section,R6003,d4e_ch_payroll_data.mensuel_structure,6003,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6003: 
	for element in inputs.A6003:
		result += element.amount",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,423
Frais de déplacement KM,none,d4e_ch_payroll_data.FREE_1,section,R6005,d4e_ch_payroll_data.mensuel_structure,6005,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = payslip.rule_parameter('frais_km') if inputs.A6005 else 0 
result_qty = inputs.A6005.amount if inputs.A6005 else 0",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,432
Frais de nuitées,none,d4e_ch_payroll_data.FREE_1,section,R6010,d4e_ch_payroll_data.mensuel_structure,6010,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6010: 
	for element in inputs.A6010:
		result += element.amount",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,391
Frais effectifs,none,d4e_ch_payroll_data.FREE_1,section,R6020,d4e_ch_payroll_data.mensuel_structure,6020,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6020: 
	for element in inputs.A6020:
		result += element.amount",none_zero_imprime,13.1.2 Frais effectifs (autres),Divers,392
Autres frais effectifs,none,d4e_ch_payroll_data.FREE_1,section,R6030,d4e_ch_payroll_data.mensuel_structure,6030,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6030: 
	for element in inputs.A6030:
		result += element.amount",none_zero_imprime,13.1.2 Frais effectifs (autres),Divers,393
Frais forfaitaire de représentation,none,d4e_ch_payroll_data.FREE_1,section,R6040,d4e_ch_payroll_data.mensuel_structure,6040,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.lump_sum_representation_costs,none_zero_imprime,13.2.1 Frais forfaitaires (représentation),Divers,394
Frais forfaitaire de voiture,none,d4e_ch_payroll_data.FREE_1,section,R6050,d4e_ch_payroll_data.mensuel_structure,6050,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.Car_flat_fee,none_zero_imprime,13.2.2 Frais forfaitaires (voiture) ,Divers,395
Frais forfaitaire pour expatriés,none,d4e_ch_payroll_data.FREE_1,section,R6060,d4e_ch_payroll_data.mensuel_structure,6060,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.Flat_rate_for_expatriates,none_zero_imprime,2.3 Prestations salariales accessoires (autres),Divers,396
Autres frais forfaitaires,none,d4e_ch_payroll_data.FREE_1,section,R6070,d4e_ch_payroll_data.mensuel_structure,6070,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.Other_flat_rate_costs,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,397
Corrections diverses,none,d4e_ch_payroll_data.FREE_1,section,R6090,d4e_ch_payroll_data.mensuel_structure,6090,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6050: 
	for element in inputs.A6050:
		result += element.amount",none_zero_imprime,Aucune rubrique,Divers,433
Retenue pour loyer,none,d4e_ch_payroll_data.FREE_1,section,R6100,d4e_ch_payroll_data.mensuel_structure,6100,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = -contract.rent_deduction,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,406
Retenue pour office des poursuites,none,d4e_ch_payroll_data.FREE_1,section,R6101,d4e_ch_payroll_data.mensuel_structure,6101,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = -contract.withholding_prosecution_office,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,407
Divers 1,none,d4e_ch_payroll_data.FREE_1,section,R6110,d4e_ch_payroll_data.mensuel_structure,6110,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.various1,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,408
Divers 2,none,d4e_ch_payroll_data.FREE_1,section,R6111,d4e_ch_payroll_data.mensuel_structure,6111,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.various2,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,409
Nombre de fiche de salaire,none,d4e_ch_payroll_data.REPORT_1,storage data,001,d4e_ch_payroll_data.horaire_structure,1,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = employee.hr_payslip_number,tj_imprime,Aucune rubrique,,689
Cumul AVS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,002,d4e_ch_payroll_data.horaire_structure,2,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('AVS_BASE'):
  for m in table_calcul_base['AVS_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['AVS_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,690
Cumul AC,none,d4e_ch_payroll_data.REPORT_1,calculation basis,003,d4e_ch_payroll_data.horaire_structure,3,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('AC_BASE'):
  for m in table_calcul_base['AC_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['AC_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,698
Cumul LAA,none,d4e_ch_payroll_data.REPORT_1,calculation basis,004,d4e_ch_payroll_data.horaire_structure,4,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('LAA_BASE'):
  for m in table_calcul_base['LAA_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['LAA_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,699
Cumul IJM,none,d4e_ch_payroll_data.REPORT_1,calculation basis,005,d4e_ch_payroll_data.horaire_structure,5,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('IJM_BASE'):
  for m in table_calcul_base['IJM_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['IJM_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,700
Cumul LPP,none,d4e_ch_payroll_data.REPORT_1,calculation basis,006,d4e_ch_payroll_data.horaire_structure,6,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('LPP_BASE'):
  for m in table_calcul_base['LPP_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['LPP_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,701
Cumul ACC,none,d4e_ch_payroll_data.REPORT_1,calculation basis,007,d4e_ch_payroll_data.horaire_structure,7,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('ACC_BASE'):
  for m in table_calcul_base['ACC_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['ACC_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,702
Cumul IS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,008,d4e_ch_payroll_data.horaire_structure,8,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('IS_BASE'):
  for m in table_calcul_base['IS_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['IS_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,703
Cumul Vacances,none,d4e_ch_payroll_data.REPORT_1,calculation basis,009,d4e_ch_payroll_data.horaire_structure,9,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"number_month_cacule = str( payslip.date_from)[5:7]
result=0
if number_month_cacule == '01':
            month_cacule= 'january'
elif number_month_cacule == '02':
            month_cacule= 'february'
elif number_month_cacule == '03':
            month_cacule= 'march'
elif number_month_cacule == '04':
            month_cacule= 'avril'
elif number_month_cacule == '05':
            month_cacule= 'may'
elif number_month_cacule == '06':
           month_cacule= 'june'
elif number_month_cacule == '07':
            month_cacule= 'july'
elif number_month_cacule == '08':
            month_cacule= 'august'
elif number_month_cacule == '09':
            month_cacule= 'september'
elif number_month_cacule == '10':
            month_cacule= 'october'
elif number_month_cacule == '11':
            month_cacule= 'november'
elif number_month_cacule == '12':
            month_cacule= 'december'

if table_calcul_base.get('VAC_BASE'):
  for m in table_calcul_base['VAC_BASE']:
	  if m != month_cacule:
		  result +=float(table_calcul_base['VAC_BASE'][m])
	  else: break",tj_imprime,Aucune rubrique,,710
Salaire horaire,none,d4e_ch_payroll_data.GROSS_1,section,R1005,d4e_ch_payroll_data.horaire_structure,1005,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result_qty = worked_days.WORK101.number_of_hours if worked_days.WORK101 else 0
result = contract.hourly_wage",tj_imprime,1 Salaire / Rente,Salaire Brut,575
Honoraires,none,d4e_ch_payroll_data.GROSS_1,section,R1010,d4e_ch_payroll_data.horaire_structure,1010,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1010: 
	for element in inputs.A1010:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,578
Heures supplémentaires à 125%,none,d4e_ch_payroll_data.GROSS_1,section,R1061,d4e_ch_payroll_data.horaire_structure,1061,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1061: 
	for element in inputs.A1061:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,621
Heures supplémentaires,none,d4e_ch_payroll_data.GROSS_1,section,R1065,d4e_ch_payroll_data.horaire_structure,1065,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1065: 
	for element in inputs.A1065:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,622
Indemnité travail par équipes,none,d4e_ch_payroll_data.GROSS_1,section,R1070,d4e_ch_payroll_data.horaire_structure,1070,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1070: 
	for element in inputs.A1070:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,623
Indemnité pour service de piquet,none,d4e_ch_payroll_data.GROSS_1,section,R1071,d4e_ch_payroll_data.horaire_structure,1071,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1071: 
	for element in inputs.A1071:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,624
Indemnité d'engagement,none,d4e_ch_payroll_data.GROSS_1,section,R1072,d4e_ch_payroll_data.horaire_structure,1072,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1072: 
	for element in inputs.A1072:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,625
Indemnité pour travail dominical,none,d4e_ch_payroll_data.GROSS_1,section,R1073,d4e_ch_payroll_data.horaire_structure,1073,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1073: 
	for element in inputs.A1073:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,626
Indemnité pour inconvénients,none,d4e_ch_payroll_data.GROSS_1,section,R1074,d4e_ch_payroll_data.horaire_structure,1074,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1074: 
	for element in inputs.A1074:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,627
Indemnité pour service de nuit,none,d4e_ch_payroll_data.GROSS_1,section,R1075,d4e_ch_payroll_data.horaire_structure,1075,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1075: 
	for element in inputs.A1075:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,628
Indemnité pour travail de nuit,none,d4e_ch_payroll_data.GROSS_1,section,R1076,d4e_ch_payroll_data.horaire_structure,1076,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1076: 
	for element in inputs.A1076:
		result += element.amount",tj_imprime,1 Salaire / Rente,Salaire Brut,629
Indemnités inconvénients du chantier,none,d4e_ch_payroll_data.GROSS_1,section,R1100,d4e_ch_payroll_data.horaire_structure,1100,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1100: 
	for element in inputs.A1100:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,630
Indemnité pour travail pénible,none,d4e_ch_payroll_data.GROSS_1,section,R1101,d4e_ch_payroll_data.horaire_structure,1101,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1101: 
	for element in inputs.A1101:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,,631
Indemnité pour travail salissant,none,d4e_ch_payroll_data.GROSS_1,section,R1102,d4e_ch_payroll_data.horaire_structure,1102,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1102: 
	for element in inputs.A1102:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,632
Indemnité pour poussière,none,d4e_ch_payroll_data.GROSS_1,section,R1103,d4e_ch_payroll_data.horaire_structure,1103,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1103: 
	for element in inputs.A1103:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,633
Indemnité pour travaux souterrains,none,d4e_ch_payroll_data.GROSS_1,section,R1104,d4e_ch_payroll_data.horaire_structure,1104,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1104: 
	for element in inputs.A1104:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,634
Avancement,none,d4e_ch_payroll_data.GROSS_1,section,R1110,d4e_ch_payroll_data.horaire_structure,1110,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1110: 
	for element in inputs.A1110:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,635
Prime pour percement,none,d4e_ch_payroll_data.GROSS_1,section,R1111,d4e_ch_payroll_data.horaire_structure,1111,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1111: 
	for element in inputs.A1111:
		result += element.amount",tj_imprime,3 Prestations non périodiques,Salaire Brut,636
Prime pour ténacité,none,d4e_ch_payroll_data.GROSS_1,section,R1112,d4e_ch_payroll_data.horaire_structure,1112,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1112: 
	for element in inputs.A1112:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,637
Prime d'engagement,none,d4e_ch_payroll_data.GROSS_1,section,R1130,d4e_ch_payroll_data.horaire_structure,1130,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1130: 
	for element in inputs.A1130:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,638
Indemnité de non-engagement,none,d4e_ch_payroll_data.GROSS_1,section,R1131,d4e_ch_payroll_data.horaire_structure,1131,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1131: 
	for element in inputs.A1131:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,639
Indemnité de vacances,none,d4e_ch_payroll_data.GROSS_1,section,R1160,d4e_ch_payroll_data.horaire_structure,1160,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1160: 
	for element in inputs.A1160:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,640
Indemnité pour jours fériés,none,d4e_ch_payroll_data.GROSS_1,section,R1161,d4e_ch_payroll_data.horaire_structure,1161,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1161: 
	for element in inputs.A1161:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,641
Vacances payées %,python,d4e_ch_payroll_data.VACANCES_1,section,R1162,d4e_ch_payroll_data.horaire_structure,1162,TRUE,TRUE,result = contract.hourly_wage > 0,code,"if  (employee.emp_age >= 20 and employee.emp_age <= 49) :
    result = categories.BRUT
    result_rate = payslip.rule_parameter('vacances_20')
elif (employee.emp_age >= 50):
    result = categories.BRUT
    result_rate = payslip.rule_parameter('vacances_50')
else :
    result = 0",none_zero_imprime,1 Salaire / Rente,Salaire Brut,687
Vacances payées,none,d4e_ch_payroll_data.VACANCES_1,section,R1163,d4e_ch_payroll_data.horaire_structure,1163,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1163: 
	for element in inputs.A1163:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,642
Paiement vacances,none,d4e_ch_payroll_data.VACANCES_1,section,R1165,d4e_ch_payroll_data.horaire_structure,1165,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1165: 
	for element in inputs.A1165:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,643
13e salaire payé %,python,d4e_ch_payroll_data.GROSS_1,section,R1180,d4e_ch_payroll_data.horaire_structure,1180,TRUE,TRUE,result = contract.hourly_wage > 0,code,"result = categories.BRUT
result_rate = payslip.rule_parameter('taux_13eme')
",none_zero_imprime,1 Salaire / Rente,Salaire Brut,688
13e salaire payé,none,d4e_ch_payroll_data.GROSS_1,section,R1181,d4e_ch_payroll_data.horaire_structure,1181,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1181: 
	for element in inputs.A1181:
		result += element.amount",none_zero_imprime,1 Salaire / Rente,Salaire Brut,644
Gratification,none,d4e_ch_payroll_data.GROSS_1,section,R1201,d4e_ch_payroll_data.horaire_structure,1201,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1201: 
	for element in inputs.A1201:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,645
Gratification de Noël,none,d4e_ch_payroll_data.GROSS_1,section,R1202,d4e_ch_payroll_data.horaire_structure,1202,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1202: 
	for element in inputs.A1202:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,646
Bonus,none,d4e_ch_payroll_data.GROSS_1,section,R1210,d4e_ch_payroll_data.horaire_structure,1210,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1210: 
	for element in inputs.A1210:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,647
Participation aux bénéfices,none,d4e_ch_payroll_data.GROSS_1,section,R1211,d4e_ch_payroll_data.horaire_structure,1211,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1211: 
	for element in inputs.A1211:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,648
Allocation spéciale,none,d4e_ch_payroll_data.GROSS_1,section,R1212,d4e_ch_payroll_data.horaire_structure,1212,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1212: 
	for element in inputs.A1212:
		result += element.amount",none_zero_imprime,3 Prestations non périodiques,Salaire Brut,649
Prime de succès,none,d4e_ch_payroll_data.GROSS_1,section,R1213,d4e_ch_payroll_data.horaire_structure,1213,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1213: 
	for element in inputs.A1213:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,650
Prime de rendement,none,d4e_ch_payroll_data.GROSS_1,section,R1214,d4e_ch_payroll_data.horaire_structure,1214,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1214: 
	for element in inputs.A1214:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,651
Prime de reconnaissance,none,d4e_ch_payroll_data.GROSS_1,section,R1215,d4e_ch_payroll_data.horaire_structure,1215,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1215: 
	for element in inputs.A1215:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,652
Prime pour propositions d'amélioration,none,d4e_ch_payroll_data.GROSS_1,section,R1216,d4e_ch_payroll_data.horaire_structure,1216,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1216: 
	for element in inputs.A1216:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,653
Prime sur chiffre d'affaires,none,d4e_ch_payroll_data.GROSS_1,section,R1217,d4e_ch_payroll_data.horaire_structure,1217,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1217: 
	for element in inputs.A1217:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,654
Commission,none,d4e_ch_payroll_data.GROSS_1,section,R1218,d4e_ch_payroll_data.horaire_structure,1218,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1218: 
	for element in inputs.A1218:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,655
Prime de présence,none,d4e_ch_payroll_data.GROSS_1,section,R1219,d4e_ch_payroll_data.horaire_structure,1219,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1219: 
	for element in inputs.A1219:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,656
Cadeau pour ancienneté de service,none,d4e_ch_payroll_data.GROSS_1,section,R1230,d4e_ch_payroll_data.horaire_structure,1230,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1230: 
	for element in inputs.A1230:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,657
Cadeau de jubilé,none,d4e_ch_payroll_data.GROSS_1,section,R1231,d4e_ch_payroll_data.horaire_structure,1231,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1231: 
	for element in inputs.A1231:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,658
Prime de fidélité,none,d4e_ch_payroll_data.GROSS_1,section,R1232,d4e_ch_payroll_data.horaire_structure,1232,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1232: 
	for element in inputs.A1232:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,659
Prime pour prévention de dommages,none,d4e_ch_payroll_data.GROSS_1,section,R1250,d4e_ch_payroll_data.horaire_structure,1250,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1250: 
	for element in inputs.A1250:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,660
Salaire en cas d'accident,none,d4e_ch_payroll_data.GROSS_1,section,R1300,d4e_ch_payroll_data.horaire_structure,1300,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1300: 
	for element in inputs.A1300:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,661
Salaire en cas de maladie,none,d4e_ch_payroll_data.GROSS_1,section,R1301,d4e_ch_payroll_data.horaire_structure,1301,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1301: 
	for element in inputs.A1301:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,662
"Salaire service militaire, protection civile",none,d4e_ch_payroll_data.GROSS_1,section,R1302,d4e_ch_payroll_data.horaire_structure,1302,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1302: 
	for element in inputs.A1302:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,663
Salaire formation et perfectionnement,none,d4e_ch_payroll_data.GROSS_1,section,R1303,d4e_ch_payroll_data.horaire_structure,1303,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A1303: 
	for element in inputs.A1303:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,664
Part privée voiture de service,none,d4e_ch_payroll_data.GROSS_1,section,R1910,d4e_ch_payroll_data.horaire_structure,1910,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.private_share_service_car,none_zero_imprime,Aucune rubrique,Salaire Brut,665
Indemnité accident,none,d4e_ch_payroll_data.INDEMNITES_1,section,R2030,d4e_ch_payroll_data.horaire_structure,2030,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A2030: 
	for element in inputs.A2030:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,666
Indemnité maladie,none,d4e_ch_payroll_data.INDEMNITES_1,section,R2035,d4e_ch_payroll_data.horaire_structure,2035,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A2035: 
	for element in inputs.A2035:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,667
Indemnité maternité,none,d4e_ch_payroll_data.INDEMNITES_1,section,R2040,d4e_ch_payroll_data.horaire_structure,2040,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A2040: 
	for element in inputs.A2040:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,668
Correction indemnités de tiers,none,d4e_ch_payroll_data.GROSS_1,section,R2050,d4e_ch_payroll_data.horaire_structure,2050,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A2050: 
	for element in inputs.A2050:
		result += element.amount",none_zero_imprime,Aucune rubrique,Salaire Brut,669
Allocations familiales,none,d4e_ch_payroll_data.ALW_1,section,R3030,d4e_ch_payroll_data.horaire_structure,3030,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.allocation_for_child,none_zero_imprime,Aucune rubrique,Salaire Brut,685
Base AVS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,AVS_BASE,d4e_ch_payroll_data.horaire_structure,5000,TRUE,TRUE,“ ”,code,result = categories.BRUT+categories.VACANCES,tj_imprime,Aucune rubrique,,580
Base AC,none,d4e_ch_payroll_data.REPORT_1,calculation basis,AC_BASE,d4e_ch_payroll_data.horaire_structure,5000,TRUE,TRUE,“ ”,code,result = categories.BRUT+categories.VACANCES,tj_imprime,Aucune rubrique,,583
Base AC Complémentaire,none,d4e_ch_payroll_data.REPORT_1,calculation basis,ACC_BASE,d4e_ch_payroll_data.horaire_structure,5000,TRUE,TRUE,result = contract.ac_contribution == 1,code,"if AC_BASE <= payslip.rule_parameter('plafond_ac_mensuel'):
        result = 0
if AC_BASE > payslip.rule_parameter('plafond_ac_mensuel'):
        result = categories.BRUT +categories.VACANCES - payslip.rule_parameter('plafond_ac_mensuel')",tj_imprime,Aucune rubrique,,587
Base LAA,none,d4e_ch_payroll_data.REPORT_1,calculation basis,LAA_BASE,d4e_ch_payroll_data.horaire_structure,5000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"if payslip.paid_amount <= payslip.rule_parameter('plafond_laa_mensuel'):
    result = categories.BRUT+categories.VACANCES
if payslip.paid_amount > payslip.rule_parameter('plafond_laa_mensuel'):
    result = payslip.rule_parameter('plafond_laa_mensuel')",tj_imprime,Aucune rubrique,,594
Base IJM,none,d4e_ch_payroll_data.REPORT_1,calculation basis,IJM_BASE,d4e_ch_payroll_data.horaire_structure,5000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"if payslip.paid_amount <= payslip.rule_parameter('plafond_ijm_mensuel'):
    result = categories.BRUT+categories.VACANCES
if payslip.paid_amount > payslip.rule_parameter('plafond_ijm_mensuel'):
    result = payslip.rule_parameter('plafond_ijm_mensuel')",tj_imprime,Aucune rubrique,,602
Base LPP,none,d4e_ch_payroll_data.REPORT_1,calculation basis,LPP_BASE,d4e_ch_payroll_data.horaire_structure,5000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"if payslip.paid_amount <= payslip.rule_parameter('plafond_lpp_mensuel'):
    result = categories.BRUT+categories.VACANCES
if payslip.paid_amount > payslip.rule_parameter('plafond_lpp_mensuel'):
    result = payslip.rule_parameter('plafond_lpp_mensuel')",tj_imprime,Aucune rubrique,,619
Base IS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,IS_BASE,d4e_ch_payroll_data.horaire_structure,5000,TRUE,TRUE,“ ”,code,result = categories.BRUT + categories.INDEMNITES +categories.VACANCES,tj_imprime,Aucune rubrique,,670
Base Vacances,none,d4e_ch_payroll_data.REPORT_1,calculation basis,VAC_BASE,d4e_ch_payroll_data.horaire_structure,5000,TRUE,FALSE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = categories.BRUT,tj_imprime,Aucune rubrique,,709
Salaire AVS,python,d4e_ch_payroll_data.REPORT_1,calculation basis,AVS_SALAIRE,d4e_ch_payroll_data.horaire_structure,5001,TRUE,TRUE,result = contract.avs_contribution == 1,code,"if ( employee.date_deb_benefic_rente )and(((employee.emp_age >= 64 and employee.gender == 'female') or (employee.emp_age >= 65)) and employee.date_deb_benefic_rente <= 
                       compute_current_date().date()) :
     result = AVS_BASE - payslip.rule_parameter('plafond_avs_mensuel') - contract.avs_ded_year
elif (employee.emp_age >= 18 or employee.bool_age_18) and (employee.emp_age < 64 or (employee.emp_age < 65 and employee.gender == 'male'))  :
     result = AVS_BASE
else :
     result = 0",tj_imprime,Aucune rubrique,,579
Salaire AC,none,d4e_ch_payroll_data.REPORT_1,calculation basis,AC_SALAIRE,d4e_ch_payroll_data.horaire_structure,5001,TRUE,TRUE,result = contract.ac_contribution == 1,code,"if ((((employee.emp_age >= 64 and employee.gender == 'female') or (employee.emp_age >= 65)) and employee.date_deb_benefic_rente <= compute_current_date().date()) or employee.emp_age < 18 and employee.bool_age_18 ==0):
    result = 0
else :
    if AC_BASE <= payslip.rule_parameter('plafond_ac_mensuel'):
        result = AC_BASE
    if AC_BASE > payslip.rule_parameter('plafond_ac_mensuel'):
        result = payslip.rule_parameter('plafond_ac_mensuel')",tj_imprime,Aucune rubrique,,584
Salaire AC Complémentaire,none,d4e_ch_payroll_data.REPORT_1,calculation basis,ACC_SALAIRE,d4e_ch_payroll_data.horaire_structure,5001,TRUE,TRUE,result = contract.ac_contribution == 1,code,"if ((((employee.emp_age >= 64 and employee.gender == 'female') or (employee.emp_age >= 65)) and employee.date_deb_benefic_rente <= compute_current_date().date()) or employee.emp_age < 18 or payslip.paid_amount < payslip.rule_parameter('plafond_ac_mensuel')):
	result = 0
if AC_BASE > payslip.rule_parameter('plafond_ac_mensuel'):
        result = AC_BASE - payslip.rule_parameter('plafond_ac_mensuel')",tj_imprime,Aucune rubrique,,588
Salaire LAA,none,d4e_ch_payroll_data.REPORT_1,calculation basis,LAA_SALAIRE,d4e_ch_payroll_data.horaire_structure,5001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = LAA_BASE,tj_imprime,Aucune rubrique,,595
Salaire IJM,none,d4e_ch_payroll_data.REPORT_1,calculation basis,IJM_SALAIRE,d4e_ch_payroll_data.horaire_structure,5001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = IJM_BASE,tj_imprime,Aucune rubrique,,603
Salaire LPP,none,d4e_ch_payroll_data.REPORT_1,calculation basis,LPP_SALAIRE,d4e_ch_payroll_data.horaire_structure,5001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = LPP_BASE,tj_imprime,Aucune rubrique,,620
Salaire IS,none,d4e_ch_payroll_data.REPORT_1,calculation basis,IS_SALAIRE,d4e_ch_payroll_data.horaire_structure,5001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = IS_BASE,tj_imprime,Aucune rubrique,,671
Cotisation AVS,python,d4e_ch_payroll_data.DED_1,section,R5010,d4e_ch_payroll_data.horaire_structure,5010,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['avs_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AVS_SALAIRE
result_rate = payslip.rule_parameter('taux_avs_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,581
Cotisation AVS - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5010_PP,d4e_ch_payroll_data.horaire_structure,5010,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['avs_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AVS_SALAIRE
result_rate = payslip.rule_parameter('taux_avs_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,582
Cotisation AC,python,d4e_ch_payroll_data.DED_1,section,R5020,d4e_ch_payroll_data.horaire_structure,5020,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule in dict_cotisation['ac_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AC_SALAIRE
result_rate = payslip.rule_parameter('taux_ac_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,585
Cotisation AC - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5020_PP,d4e_ch_payroll_data.horaire_structure,5020,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule in dict_cotisation['ac_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AC_SALAIRE
result_rate = payslip.rule_parameter('taux_ac_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,586
Cotisation AC complémentaire,python,d4e_ch_payroll_data.DED_1,section,R5022,d4e_ch_payroll_data.horaire_structure,5022,TRUE,TRUE,result = (payslip.paid_amount > payslip.rule_parameter('plafond_ac_mensuel')) and (employee.emp_age >= 18) and (employee.emp_age < 64 or (employee.emp_age < 65 and employee.gender == 'male')) and (contract.ac_contribution == 1),code,"result = -ACC_SALAIRE
result_rate = payslip.rule_parameter('taux_accomp_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,589
Cotisation AC complémentaire - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5022_PP,d4e_ch_payroll_data.horaire_structure,5022,TRUE,TRUE,result = (AC_BASE > payslip.rule_parameter('plafond_ac_mensuel')) and employee.emp_age >= 18 and (employee.emp_age < 64 or (employee.emp_age < 65 and employee.gender == 'male')) and (contract.ac_contribution == 1),code,"result = -ACC_SALAIRE
result_rate = payslip.rule_parameter('taux_accomp_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,590
Participation cotisations allocations familiales,python,d4e_ch_payroll_data.DED_1,section,R5027,d4e_ch_payroll_data.horaire_structure,5027,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['avs_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AVS_SALAIRE
result_rate = payslip.rule_parameter('taux_allocfam_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,591
Participation cotisations allocations familiales - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5027_PP,d4e_ch_payroll_data.horaire_structure,5027,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['avs_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -AVS_SALAIRE
result_rate = payslip.rule_parameter('taux_allocfam_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,592
Assurance accident A1 - Assuré AANP et AAP avec déduction AANP,python,d4e_ch_payroll_data.DED_1,section,R5032,d4e_ch_payroll_data.horaire_structure,5032,TRUE,TRUE,result = contract.laa_contribution == 'A1 - AAP and AANP insured - with AANP deductions',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_a1_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,593
Assurance accident A1 - AAP - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5032_PP,d4e_ch_payroll_data.horaire_structure,5032,TRUE,TRUE,result = contract.laa_contribution == 'A1 - AAP and AANP insured - with AANP deductions',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_a1_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,605
Assurance accident A2 - Assuré AANP et AAP sans déduction AANP - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5033_PP,d4e_ch_payroll_data.horaire_structure,5033,TRUE,TRUE,result = contract.laa_contribution == 'A2 - AAP and AANP insured - without AANP deduction',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_a2_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,596
Assurance accident A3 - Assuré AAP uniquement - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5034_PP,d4e_ch_payroll_data.horaire_structure,5034,TRUE,TRUE,result = contract.laa_contribution == 'A3 - AAP insured only - without AANP deduction',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_a3_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,597
Assurance accident B1 - Assuré AANP et AAP avec déduction AANP,python,d4e_ch_payroll_data.DED_1,section,R5036,d4e_ch_payroll_data.horaire_structure,5036,TRUE,TRUE,result = contract.laa_contribution == 'B1 - AAP and AANP insured - with AANP deductions',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_b1_employe')",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,598
Assurance accident B1 - AAP - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5036_PP,d4e_ch_payroll_data.horaire_structure,5036,TRUE,TRUE,result = contract.laa_contribution == 'B1 - AAP and AANP insured - with AANP deductions',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_b1_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,606
Assurance accident B2 - Assuré AANP et AAP sans déduction AANP - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5037_PP,d4e_ch_payroll_data.horaire_structure,5037,TRUE,TRUE,result = contract.laa_contribution == 'B2 - AAP and AANP insured - without AANP deduction',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_b2_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,599
Assurance accident B3 - Assuré AAP seulement - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5038_PP,d4e_ch_payroll_data.horaire_structure,5038,TRUE,TRUE,result = contract.laa_contribution == 'B3 - AAP insured only - without AANP deduction',code,"result = -LAA_BASE
result_rate = payslip.rule_parameter('taux_laa_b3_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,600
Cotisation IJM,python,d4e_ch_payroll_data.DED_1,section,R5050,d4e_ch_payroll_data.horaire_structure,5050,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['ijm_contribution'] :
  result = 1
else : 
  result = 0",code,"
if  (employee.gender == 'female')  :
    result = -IJM_BASE
    result_rate = payslip.rule_parameter('taux_ijm_f_employe')
elif (employee.gender == 'male')  :
    result = -IJM_BASE
    result_rate = payslip.rule_parameter('taux_ijm_m_employe')
else :
    result = 0
    result_rate = 0
",tj_imprime,9 Cotisations AVS/AI/APG/AC/AANP,Charges Sociales,601
Cotisation IJM - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5050_PP,d4e_ch_payroll_data.horaire_structure,5050,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['ijm_contribution'] :
  result = 1
else : 
  result = 0",code,"
if  (employee.gender == 'female')  :
    result = -IJM_BASE
    result_rate = payslip.rule_parameter('taux_ijm_f_employeur')
elif (employee.gender == 'male')  :
    result = -IJM_BASE
    result_rate = payslip.rule_parameter('taux_ijm_m_employeur')
else :
    result = 0
    result_rate = 0
",tj_imprime,Aucune rubrique,Charges Sociales,604
Cotisation LPP fixe,python,d4e_ch_payroll_data.DED_1,section,R5054,d4e_ch_payroll_data.horaire_structure,5054,TRUE,TRUE,result = contract.lpp_fixe != 0,code,"result = -contract.lpp_fixe
",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,607
Cotisation LPP fixe - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5054_PP,d4e_ch_payroll_data.horaire_structure,5054,TRUE,TRUE,result = contract.lpp_fixe_pp != 0,code,result = contract.lpp_fixe_pp,tj_imprime,Aucune rubrique,Charges Sociales,608
Cotisation LPP coordonnée,python,d4e_ch_payroll_data.DED_1,section,R5055,d4e_ch_payroll_data.horaire_structure,5055,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['lpp_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -LPP_BASE+ payslip.rule_parameter('montant_lpp_coordination')
result_rate = payslip.rule_parameter('taux_lppc_25_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,609
Cotisation LPP coordonnée - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5055_PP,d4e_ch_payroll_data.horaire_structure,5055,TRUE,TRUE,"number_month_cacule = str( payslip.date_from)[5:7]
if number_month_cacule[0]=='0':
  number_month=number_month_cacule[1]
else:
  number_month = number_month_cacule
if number_month in dict_cotisation['lpp_contribution'] :
  result = 1
else : 
  result = 0",code,"result = -LPP_BASE+ payslip.rule_parameter('montant_lpp_coordination')
result_rate = payslip.rule_parameter('taux_lppc_25_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,610
Cotisation LPP - Plan A,python,d4e_ch_payroll_data.DED_1,section,R5056,d4e_ch_payroll_data.horaire_structure,5056,TRUE,TRUE,result = contract.lpp_code.code == 'A',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_a_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,611
Cotisation LPP - Plan A - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5056_PP,d4e_ch_payroll_data.horaire_structure,5056,TRUE,TRUE,result = contract.lpp_code.code == 'A',code,"	result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_a_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,612
Cotisation LPP - Plan B,python,d4e_ch_payroll_data.DED_1,section,R5057,d4e_ch_payroll_data.horaire_structure,5057,TRUE,TRUE,result = contract.lpp_code.code == 'B',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_b_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,613
Cotisation LPP - Plan B - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5057_PP,d4e_ch_payroll_data.horaire_structure,5057,TRUE,TRUE,result = contract.lpp_code.code == 'B',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_b_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,614
Cotisation LPP - Plan C,python,d4e_ch_payroll_data.DED_1,section,R5058,d4e_ch_payroll_data.horaire_structure,5058,TRUE,TRUE,result = contract.lpp_code.code == 'C',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_c_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,615
Cotisation LPP - Plan C - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5058_PP,d4e_ch_payroll_data.horaire_structure,5058,TRUE,TRUE,result = contract.lpp_code.code == 'C',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_c_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,616
Cotisation LPP - Plan D,python,d4e_ch_payroll_data.DED_1,section,R5059,d4e_ch_payroll_data.horaire_structure,5059,TRUE,TRUE,result = contract.lpp_code.code == 'D',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_d_employe')",tj_imprime,10.1 Prévoyance professionnelle (cotisations ordinaires),Charges Sociales,617
Cotisation LPP - Plan D - PP,python,d4e_ch_payroll_data.COMP_1,Headings - Employer share,R5059_PP,d4e_ch_payroll_data.horaire_structure,5059,TRUE,TRUE,result = contract.lpp_code.code == 'D',code,"result = -LPP_BASE
result_rate = payslip.rule_parameter('taux_lpp_d_employeur')",tj_imprime,Aucune rubrique,Charges Sociales,618
Retenue Impôt à la source,python,d4e_ch_payroll_data.DED_1,section,R5060,d4e_ch_payroll_data.horaire_structure,5060,TRUE,TRUE,result = contract.tax_source == 'submitted_without_scale',code,"result = -IS_SALAIRE
result_rate = contract.tax_rate * 100",tj_imprime,"12 Retenue de l""impôt à la source",Charges Sociales,672
Retenue Impôt à la source - Tabelle,python,d4e_ch_payroll_data.DED_1,section,R5061,d4e_ch_payroll_data.horaire_structure,5061,TRUE,TRUE,"result = contract.tax_source == 'submitted_with_scale'
",code,"result =-IS_BASE
if contract.canton:
  canton = contract.canton.upper()
if contract.tabelle:
  tabelle = contract.tabelle
if contract.church_tax == 'true':
  church_tax = 'Y'
else:
  church_tax = 'N'
valeur_prec = 0
result_2 = 0
i=0
for element in tax_base:
  if(( i==0 )and(tax_base[element]['perception_scale']== tabelle ) and (tax_base[element]['canton']==canton) and (tax_base[element]['impot ecclésiastique']==church_tax) and (tax_base[element]['revenue'] > abs(result) )):
    result_2 = tax_base[element]['impot']
    break
  else:
    if ((tax_base[element]['perception_scale']== tabelle ) and (tax_base[element]['canton']==canton) and (tax_base[element]['impot ecclésiastique']==church_tax) and (tax_base[element]['revenue'] >  abs(result) )):
      result_2 = valeur_prec
      break
    else :
     valeur_prec =tax_base[element]['impot']
     i+=1
result_rate = result_2
",tj_imprime,"12 Retenue de l""impôt à la source",Charges Sociales,695
Correction Impôt à la source,none,d4e_ch_payroll_data.DED_1,section,R5062,d4e_ch_payroll_data.horaire_structure,5062,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A5061: 
	for element in inputs.A5061:
		result += element.amount",none_zero_imprime,"12 Retenue de l""impôt à la source",Charges Sociales,697
Retenue Part privée voiture de service,none,d4e_ch_payroll_data.FREE_1,section,R5090,d4e_ch_payroll_data.horaire_structure,5090,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = -contract.private_share_service_car,tj_imprime,Aucune rubrique,Divers,686
Frais de voyage,none,d4e_ch_payroll_data.FREE_1,section,R6000,d4e_ch_payroll_data.horaire_structure,6000,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6000: 
	for element in inputs.A6000:
		result += element.amount",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,673
Frais de voiture,none,d4e_ch_payroll_data.FREE_1,section,R6001,d4e_ch_payroll_data.horaire_structure,6001,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6001: 
	for element in inputs.A6001:
		result += element.amount",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,674
Frais de repas,none,d4e_ch_payroll_data.FREE_1,section,R6002,d4e_ch_payroll_data.horaire_structure,6002,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = payslip.rule_parameter('frais_repas') if inputs.A6002 else 0 
result_qty = inputs.A6002.amount if inputs.A6002 else 0",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,675
Frais de repas effectifs,none,d4e_ch_payroll_data.FREE_1,section,R6003,d4e_ch_payroll_data.horaire_structure,6003,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6003: 
	for element in inputs.A6003:
		result += element.amount",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,708
Frais de déplacement KM,none,d4e_ch_payroll_data.FREE_1,section,R6005,d4e_ch_payroll_data.horaire_structure,6005,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = payslip.rule_parameter('frais_km') if inputs.A6005 else 0 
result_qty = inputs.A6005.amount if inputs.A6005 else 0",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,717
Frais de nuitées,none,d4e_ch_payroll_data.FREE_1,section,R6010,d4e_ch_payroll_data.horaire_structure,6010,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6010: 
	for element in inputs.A6010:
		result += element.amount",none_zero_imprime,"13.1.1 Frais effectifs (voyage, repas, nuitées)",Divers,676
Frais effectifs,none,d4e_ch_payroll_data.FREE_1,section,R6020,d4e_ch_payroll_data.horaire_structure,6020,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6020: 
	for element in inputs.A6020:
		result += element.amount",none_zero_imprime,13.1.2 Frais effectifs (autres),Divers,677
Autres frais effectifs,none,d4e_ch_payroll_data.FREE_1,section,R6030,d4e_ch_payroll_data.horaire_structure,6030,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6030: 
	for element in inputs.A6030:
		result += element.amount",none_zero_imprime,13.1.2 Frais effectifs (autres),Divers,678
Frais forfaitaire de représentation,none,d4e_ch_payroll_data.FREE_1,section,R6040,d4e_ch_payroll_data.horaire_structure,6040,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.lump_sum_representation_costs,none_zero_imprime,13.2.1 Frais forfaitaires (représentation),Divers,679
Frais forfaitaire de voiture,none,d4e_ch_payroll_data.FREE_1,section,R6050,d4e_ch_payroll_data.horaire_structure,6050,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.Car_flat_fee,none_zero_imprime,13.2.2 Frais forfaitaires (voiture) ,Divers,680
Frais forfaitaire pour expatriés,none,d4e_ch_payroll_data.FREE_1,section,R6060,d4e_ch_payroll_data.horaire_structure,6060,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.Flat_rate_for_expatriates,none_zero_imprime,2.3 Prestations salariales accessoires (autres),Divers,681
Autres frais forfaitaires,none,d4e_ch_payroll_data.FREE_1,section,R6070,d4e_ch_payroll_data.horaire_structure,6070,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.Other_flat_rate_costs,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,682
Corrections diverses,none,d4e_ch_payroll_data.FREE_1,section,R6090,d4e_ch_payroll_data.horaire_structure,6090,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,"result = 0
if inputs.A6050: 
	for element in inputs.A6050:
		result += element.amount",none_zero_imprime,Aucune rubrique,Divers,718
Retenue pour loyer,none,d4e_ch_payroll_data.FREE_1,section,R6100,d4e_ch_payroll_data.horaire_structure,6100,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = -contract.rent_deduction,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,691
Retenue pour office des poursuites,none,d4e_ch_payroll_data.FREE_1,section,R6101,d4e_ch_payroll_data.horaire_structure,6101,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = -contract.withholding_prosecution_office,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,692
Divers 1,none,d4e_ch_payroll_data.FREE_1,section,R6110,d4e_ch_payroll_data.horaire_structure,6110,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.various1,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,693
Divers 2,none,d4e_ch_payroll_data.FREE_1,section,R6111,d4e_ch_payroll_data.horaire_structure,6111,TRUE,TRUE,"
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10",code,result = contract.various2,none_zero_imprime,13.2.3 Fris forfaitaires (autres),Divers,694
